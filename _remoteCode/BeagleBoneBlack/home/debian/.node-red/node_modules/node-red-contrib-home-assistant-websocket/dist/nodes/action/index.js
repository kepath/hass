"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = actionNode;
const joi_1 = __importDefault(require("joi"));
const helpers_1 = require("../../common/controllers/helpers");
const inputErrorHandler_1 = require("../../common/errors/inputErrorHandler");
const ClientEvents_1 = __importDefault(require("../../common/events/ClientEvents"));
const InputService_1 = __importStar(require("../../common/services/InputService"));
const Status_1 = __importDefault(require("../../common/status/Status"));
const globals_1 = require("../../globals");
const migrate_1 = require("../../helpers/migrate");
const node_1 = require("../../helpers/node");
const homeAssistant_1 = require("../../homeAssistant");
const Websocket_1 = require("../../homeAssistant/Websocket");
const ActionController_1 = __importDefault(require("./ActionController"));
const const_1 = require("./const");
const inputs = {
    action: {
        messageProp: 'payload.action',
        configProp: 'action',
    },
    target: {
        messageProp: 'payload.target',
    },
    data: {
        messageProp: 'payload.data',
        configProp: 'data',
        default: {},
    },
    // deprecated
    // TODO: Remove in version 1.0
    domain: {
        messageProp: 'payload.domain',
        configProp: 'domain',
    },
    service: {
        messageProp: 'payload.service',
        configProp: 'service',
    },
};
function transformInput(parsedMessage) {
    const { domain, service } = parsedMessage;
    if ((domain.source === InputService_1.DataSource.Message ||
        service.source === InputService_1.DataSource.Message) &&
        domain.value &&
        service.value) {
        parsedMessage.action.value = `${domain.value}.${service.value}`;
        parsedMessage.action.source = InputService_1.DataSource.Transformed;
    }
    return parsedMessage;
}
const inputSchema = joi_1.default.object({
    action: joi_1.default.string().required(),
    data: joi_1.default.alternatives(joi_1.default.string().allow(''), joi_1.default.object()).required(),
    target: joi_1.default.object().keys({
        floor_id: joi_1.default.alternatives(joi_1.default.string(), joi_1.default.array().optional()),
        area_id: joi_1.default.alternatives(joi_1.default.string(), joi_1.default.array().optional()),
        device_id: joi_1.default.alternatives(joi_1.default.string(), joi_1.default.array().optional()),
        entity_id: joi_1.default.alternatives(joi_1.default.string(), joi_1.default.array().optional()),
        label_id: joi_1.default.alternatives(joi_1.default.string(), joi_1.default.array().optional()),
    }),
}).unknown(true);
function actionNode(config) {
    globals_1.RED.nodes.createNode(this, config);
    this.config = (0, migrate_1.migrate)(config);
    const serverConfigNode = (0, node_1.getServerConfigNode)(this.config.server);
    const homeAssistant = (0, homeAssistant_1.getHomeAssistant)(serverConfigNode);
    const status = new Status_1.default({
        config: serverConfigNode.config,
        node: this,
    });
    const inputService = new InputService_1.default({
        inputs,
        nodeConfig: this.config,
        schema: inputSchema,
        transform: transformInput,
    });
    if (this.config.blockInputOverrides) {
        inputService.disableInputOverrides();
    }
    const controllerDeps = (0, helpers_1.createControllerDependencies)(this, homeAssistant);
    const controller = new ActionController_1.default({
        inputService,
        node: this,
        status,
        ...controllerDeps,
    });
    // Handle queue items when HA reconnected and in the running state
    if (this.config.queue !== const_1.Queue.None) {
        if (homeAssistant.isHomeAssistantRunning) {
            try {
                controller.onClientReady();
            }
            catch (e) {
                (0, inputErrorHandler_1.inputErrorHandler)(e, { status });
            }
        }
        const clientEvents = new ClientEvents_1.default({
            node: this,
            emitter: homeAssistant.eventBus,
        });
        clientEvents.addListener(Websocket_1.ClientEvent.Ready, controller.onClientReady.bind(controller));
    }
}
