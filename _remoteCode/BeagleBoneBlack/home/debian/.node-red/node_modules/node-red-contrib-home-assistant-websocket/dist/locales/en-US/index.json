{
	"home-assistant": {
		"ui": {
			"migrations": {
				"all_nodes_updated": "Home Assistant nodes have been updated. Deploy to save changes.",
				"button_cancel": "Cancel",
				"button_label": "Update Home Assistant Nodes",
				"button_ok": "Update Nodes",
				"message": "This will update all Home Assistant nodes to the current schema. Updating is not required for the nodes to function.\nNodes with yellow labels need to be updated before they can be edited. You can update them by opening each node individually in the Node-RED editor or by running this command.",
				"node_schema_updated": "Node schema has been updated.",
				"title": "Update Home Assistant Nodes",
				"warning": "It is recommended to back up your flows before updating all Home Assistant nodes."
			},
			"notifications": {
				"attention": "Attention",
				"clipboard_copy": "Copied to clipboard"
			},
			"text": {
				"discord": "Join Discord",
				"discussions": "Github Discussions",
				"documentation": "Documentation",
				"looking_for_help": "Looking for help?"
			}
		},
		"error": {
			"cannot_connect": "Cannot connect to Home Assistant server",
			"connection_lost": "connection lost",
			"hass_host_required": "Base URL not set in server config",
			"integration_not_loaded": "Integration not loaded",
			"invalid_auth": "Invalid access token for WebSocket",
			"invalid_state": "Invalid state",
			"no_connection": "No connection to Home Assistant",
			"pattern_not_matched": "Pattern not matched",
			"unknown_error": "Unknown error",
			"unrecognized_error": "Unrecognized error: __error__",
			"user_not_admin": "User required to have admin privileges in Home Assistant",
			"ha_version_not_supported": "Home Assistant version __version__ is not supported, please upgrade to __min_version__ or higher"
		},
		"status": {
			"connected": "connected",
			"connecting": "connecting",
			"disabled": "DISABLED",
			"disconnected": "disconnected",
			"error": "error",
			"error_registering": "error registering",
			"failed": "failed",
			"jsonata_error": "JSONata error",
			"no_connection": "no connection",
			"off": "off",
			"on": "on",
			"pressed": "pressed",
			"received": "received",
			"registered": "registered",
			"running": "running",
			"sending": "sending",
			"state_change": "state change",
			"success": "success",
			"triggered": "triggered",
			"updated": "updated",
			"validation_error": "validation error"
		},
		"label": {
			"output_properties": "Output properties",
			"cancel": "Cancel",
			"filter_results_title": "Filter results",
			"no_matches_found": "No matches found",
			"done": "Done"
		},
		"sidebar": {
			"diagnostics": {
				"close": "Close",
				"copied": "Copied!",
				"copy": "Copy to clipboard",
				"environment_data": "Environment data",
				"failed_fetch": "Failed to fetch data",
				"fetching_data": "Fetching data..."
			},
			"stacks": {
				"device": "Device",
				"entity": "Entity",
				"information": "Information",
				"issues": "Issues",
				"no_issues": "No issues found",
				"server": "Server"
			},
			"issues": {
				"show_hidden": "Show Hidden",
				"open_editor": "Open Editor",
				"hide_issue": "Hide",
				"show_issue": "Show",
				"find_node": "Find in Workspace"
			}
		},
		"service": {
			"issue": {
				"device_not_found": "Device __device_id__ not found",
				"entity_id_target_data": "Entity ID '__entity_id__' should be in the data property, not the target property, for the selected action",
				"entity_not_found": "Entity __entity_id__ not found",
				"failed_to_hide": "Failed to hide issue __issue_id__",
				"invalid_action": "Action __action__ not found",
				"issue_hidden": "Issue __issue_id__ hidden",
				"no-response": "No response from server",
				"tag_not_found": "Tag __tag_id__ not found",
				"target_area_not_found": "Target area __area_id__ not found",
				"target_device_not_found": "Target device __device_id__ not found",
				"target_entity_not_found": "Target entity __entity_id__ not found",
				"target_floor_not_found": "Target floor __floor_id__ not found",
				"target_label_not_found": "Target label __label_id__ not found",
				"tooltip_description": "Home Assistant nodes with issues",
				"unexpected": "Unexpected error (__status__) __message__",
				"zone_not_found": "Zone __zone_id__ not found"
			}
		},
		"component": {
			"id-selector": {
				"label": {
					"add-button": {
						"area": "add area",
						"device": "add device",
						"entity": "add entity",
						"floor": "add floor",
						"label": "add label",
						"regex": "add regex",
						"substring": "add substring"
					},
					"copy": "Copy ID",
					"delete": "Delete ID",
					"preview": "Preview"
				}
			},
			"property-selector": {
				"label": {
					"add-button": {
						"area_registry": "add area",
						"device_registry": "add device",
						"floor_registry": "add floor",
						"label_registry": "add label",
						"state_object": "add entity"
					},
					"area_registry_property": "Area Property",
					"copy": "Copy ID",
					"delete": "Delete ID",
					"device_registry_property": "Device Property",
					"floor_registry_property": "Floor Property",
					"label_registry_property": "Label Property",
					"state_object_property": "Entity Property"
				}
			}
		}
	},
	"ha-action": {
		"error": {
			"domain_service_deprecated": "The domain and service input properties are deprecated and will be removed in version 1.0. Please use the action property instead.",
			"entity_id_target_data": "Entity ID is required to be in the data property for this action. Please add the entity ID to the data property. This will stop working in version 1.0.",
			"invalid_action_format": "Invalid action format: __action__",
			"invalid_entity_id": "Invalid entity ID format",
			"invalid_json": "Invalid JSON: __json__",
			"invalid_merge_context": "Invalid merge context: __context__"
		},
		"label": {
			"action": "Action",
			"alternate_tags": "Use alternate template tags for the data field",
			"block_input_overrides": "Block input overrides",
			"data": "Data",
			"load_example_data": "Load example data",
			"merge_context": "Merge context",
			"name": "Name",
			"queue": "Queue",
			"queue_option": {
				"queue_all": "all messages",
				"queue_first": "first message only",
				"queue_last": "last message only",
				"queue_none": "don't queue messages"
			},
			"server": "Server",
			"show_debug": "Show debug information",
			"targets": "Targets",
			"unknown_action": "Unknown action"
		},
		"status": {
			"action_called": "__domain__.__service__ called"
		}
	},
	"ha-api": {
		"error": {
			"invalid_method": "Invalid API method __method__.",
			"requires_path": "HTTP request requires a valid path.",
			"requires_type": "A WebSocket request requires a 'type' property in the data object."
		},
		"label": {
			"data": "Data",
			"method": "Method",
			"method_option": {
				"delete": "DELETE",
				"get": "GET",
				"post": "POST",
				"put": "PUT"
			},
			"name": "Name",
			"parameters": "Parameters",
			"path": "Path",
			"protocol": "Protocol",
			"protocol_option": {
				"http": "HTTP",
				"websocket": "WebSocket"
			},
			"response_type": "Return",
			"response_type_option": {
				"arraybuffer": "a binary buffer",
				"json": "a parsed JSON object",
				"text": "a UTF-8 string"
			},
			"server": "Server",
			"show_debug": "Show debug information"
		},
		"status": {
			"method_called": "__method__ called"
		}
	},
	"ha-binary-sensor": {
		"error": {
			"api_error": "API error",
			"integration_not_loaded": "Integration not loaded/enabled",
			"invalid_state": "State must be defined",
			"no_connection": "Sensor update attempted without connection to server"
		},
		"label": {
			"attribute_key": "Attribute key",
			"attribute_value": "Value",
			"entity_config": "Entity config",
			"input_override": "Input Override",
			"input_override_option": {
				"allow": "allow",
				"block": "block",
				"merge": "merge"
			},
			"name": "Name",
			"resend": "Resend state and attributes",
			"state": "State"
		}
	},
	"ha-button": {
		"label": {
			"entity_config": "Entity Config",
			"name": "Name"
		}
	},
	"config-server": {
		"errors": {
			"empty_base_url": "Home Assistant base URL needs to be set",
			"invalid_base_url": "Invalid base URL for Home Assistant: [__url__]",
			"invalid_protocol": "Home Assistant base URL needs to begin with http:// or https://",
			"no_server_selected": "No server selected and deployed.",
			"server_deploy": "Deploy a valid server config for autocomplete to show results."
		},
		"label": {
			"accept_all_certs": "Accept Unauthorized SSL Certificates",
			"access_token": "Access token",
			"area_selector": "Area Selector",
			"base_url": "Base URL",
			"cache_autocomplete_results": "Cache autocomplete results",
			"date_option": {
				"hidden": "hidden",
				"long": "long",
				"numeric": "numeric",
				"short": "short",
				"two_digit": "2-digit"
			},
			"day": "Day",
			"delay_connection_attempts": "Delay connection attempts",
			"device_selector": "Device Selector",
			"enable_global_context_store": "Enable global context store",
			"enable_heartbeat": "Enable heartbeat",
			"entity_selector": "Entity Selector",
			"heartbeat_interval": "Heartbeat interval",
			"hour_cycle": "Hour cycle",
			"hour_cycle_option": {
				"12_hour_format": "12-hour format",
				"24_hour_format": "24-hour format",
				"default": "default"
			},
			"id_selector": "ID Selector",
			"month": "Month",
			"name": "Name",
			"seconds": "Seconds",
			"selector_option": {
				"friendly_name": "friendly name",
				"id": "id"
			},
			"separator": "Separator",
			"state_boolean_list": "State boolean",
			"status_title": "Status date format",
			"time_format": "Time format",
			"time_format_option": {
				"hour_min": "hours and minutes",
				"hour_min_sec": "hours, minutes and seconds",
				"hour_min_sec_ms": "hours, minutes, seconds and milliseconds"
			},
			"ui_settings": "UI Settings",
			"using_add_on": "Using the Home Assistant Add-on",
			"year": "Year"
		},
		"status": {
			"connected": "connected",
			"connecting": "connecting",
			"disabled": "DISABLED",
			"disconnected": "disconnected",
			"error": "error",
			"registered": "registered",
			"running": "running",
			"triggered": "triggered"
		}
	},
	"api-current-state": {
		"label": {
			"block_input_overrides": "Block Input Overrides",
			"entity_id": "Entity ID",
			"for": "For",
			"for_option": {
				"days": "days",
				"hours": "hours",
				"milliseconds": "milliseconds",
				"minutes": "minutes",
				"seconds": "seconds"
			},
			"if_state": "If State",
			"if_state_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"name": "Name",
			"server": "Server",
			"state_type": "State Type",
			"state_type_option": {
				"boolean": "boolean",
				"number": "number",
				"string": "string"
			}
		}
	},
	"ha-device": {
		"error": {
			"failed_to_fetch_capabilities": "Failed to fetch capabilities for device: __event__",
			"failed_to_fetch_triggers": "Failed to fetch triggers.",
			"failed_to_fetch_actions": "Failed to fetch actions.",
			"invalid_device_config": "Invalid config for device trigger",
			"invalid_device_type": "Invalid device type: __type__",
			"report": "Report",
			"unknown_field_type": "Unknown field type: __type__"
		},
		"label": {
			"action": "Action",
			"device": "Device",
			"hours": "hours",
			"minutes": "minutes",
			"name": "Name",
			"seconds": "seconds",
			"server": "Server",
			"trigger": "Trigger",
			"type": "Type"
		},
		"ui": {
			"no_area": "No Area"
		}
	},
	"ha-device-config": {
		"label": {
			"name": "Name",
			"manufacturer": "Manufacturer",
			"model": "Model",
			"hw_version": "Hardware Version",
			"sw_version": "Software Version"
		}
	},
	"ha-entity": {
		"label": {
			"debug": "Show Debug Information",
			"input_override": "Input Override",
			"name": "Name",
			"on_state_change": "Output on state change",
			"output_location": "Output Location",
			"payload": "Payload",
			"server": "Server",
			"state": "State",
			"type": "Type"
		}
	},
	"ha-entity-config": {
		"label": {
			"device": "Device",
			"name": "Name",
			"resend": "Resend state and attributes",
			"server": "Server",
			"show_debug": "Show debug information",
			"type": "Type",
			"type_option": {
				"binary_sensor": "binary sensor",
				"button": "button",
				"number": "number",
				"select": "select",
				"sensor": "sensor",
				"switch": "switch",
				"text": "text",
				"time": "time"
			}
		},
		"data": {
			"label": {
				"device_class": "Device class",
				"device_class_options": {
					"apparent_power": "apparent power",
					"aqi": "aqi",
					"atmospheric_pressure": "atmospheric pressure",
					"battery": "battery",
					"battery_charging": "battery charging",
					"carbon_dioxide": "carbon dioxide",
					"carbon_monoxide": "carbon monoxide",
					"co": "co",
					"cold": "cold",
					"connectivity": "connectivity",
					"current": "current",
					"data_rate": "data rate",
					"data_size": "data size",
					"date": "date",
					"distance": "distance",
					"door": "door",
					"duration": "duration",
					"energy": "energy",
					"energy_storage": "energy storage",
					"frequency": "frequency",
					"garage_door": "garage door",
					"gas": "gas",
					"heat": "heat",
					"humidity": "humidity",
					"illuminance": "illuminance",
					"irradiance": "irradiance",
					"light": "light",
					"lock": "lock",
					"moisture": "moisture",
					"monetary": "monetary",
					"motion": "motion",
					"moving": "moving",
					"nitrogen_dioxide": "nitrogen dioxide",
					"nitrogen_monoxide": "nitrogen monoxide",
					"nitrous_oxide": "nitrous oxide",
					"occupancy": "occupancy",
					"opening": "opening",
					"outlet": "outlet",
					"ozone": "ozone",
					"plug": "plug",
					"pm1": "pm1",
					"pm10": "pm10",
					"pm25": "pm25",
					"power": "power",
					"power_factor": "power factor",
					"precipitation": "precipitation",
					"precipitation_intensity": "precipitation intensity",
					"presence": "presence",
					"pressure": "pressure",
					"problem": "problem",
					"reactive_power": "reactive power",
					"restart": "restart",
					"running": "running",
					"safety": "safety",
					"signal_strength": "signal strength",
					"smoke": "smoke",
					"sound": "sound",
					"sound_pressure": "sound pressure",
					"speed": "speed",
					"sulphur_dioxide": "sulfur dioxide",
					"switch": "switch",
					"tamper": "tamper",
					"temperature": "temperature",
					"timestamp": "timestamp",
					"update": "update",
					"vibration": "vibration",
					"volatile_organic_compounds": "volatile organic compounds",
					"voltage": "voltage",
					"volume": "volume",
					"volume_storage": "volume storage",
					"water": "water",
					"weight": "weight",
					"wind_speed": "wind speed",
					"window": "window"
				},
				"entity_category": "Category",
				"entity_category_options": {
					"config": "config",
					"diagnostic": "diagnostic"
				},
				"entity_picture": "Entity picture",
				"icon": "Icon",
				"last_reset": "Last reset",
				"max_length": "Max length",
				"max_value": "Max value",
				"min_length": "Min length",
				"min_value": "Min value",
				"mode": "Mode",
				"mode_options": {
					"auto": "auto",
					"box": "box",
					"password": "password",
					"slider": "slider",
					"text": "text"
				},
				"name": "Friendly name",
				"options": "Options",
				"pattern": "Pattern",
				"state_class": "State class",
				"state_class_options": {
					"measurement": "measurement",
					"total": "total",
					"total_increasing": "total increasing"
				},
				"step_value": "Step",
				"unit_of_measurement": "Unit of measurement"
			}
		}
	},
	"server-events": {
		"alert": "Alert",
		"alert_message": "Leaving Event Type empty and listening for all events may overload the WebSocket message queue.",
		"error": {
			"invalid_json": "Event data is not valid JSON"
		},
		"label": {
			"event_data": "Event data",
			"event_type": "Event type",
			"name": "Name",
			"output_only_after_running": "Output only after Home Assistant is running",
			"server": "Server"
		},
		"placeholder": {
			"all_events": "leave empty for all events"
		}
	},
	"ha-events-calendar": {
		"label": {
			"name": "Name",
			"server": "Server",
			"entityId": "Calendar",
			"eventType": "Relative To",
			"start": "Start",
			"end": "End",
			"offset": "Offset",
			"seconds": "seconds",
			"minutes": "minutes",
			"hours": "hours",
			"filter": "Filter"
		},
		"error": {
			"retrieval": "calendar items could not be retrieved from entity_id \"__entity__\", __error__"
		},
		"status": {
			"sent": "__summary__ sent",
			"queued-none": "no upcoming events queued",
			"queued-one": "queued 1 upcoming event",
			"queued-multi": "queued __count__ upcoming events"
		}
	},
	"server-state-changed": {
		"error": {
			"entity_required": "An entity is required",
			"invalid_for": "Invalid config value for 'for': \"__for__\" (type: __type__)"
		},
		"label": {
			"entity": "Entity",
			"entities": "Entities",
			"entity_option": {
				"exact": "exact",
				"list": "list",
				"regex": "regex",
				"substring": "substring"
			},
			"for": "For",
			"for_option": {
				"days": "days",
				"hours": "hours",
				"milliseconds": "milliseconds",
				"minutes": "minutes",
				"seconds": "seconds"
			},
			"if_state": "If State",
			"if_state_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"ignore_current_state_unavailable": "Current state is unavailable",
			"ignore_current_state_unknown": "Current state is unknown",
			"ignore_prev_state_null": "Previous state doesn't exist",
			"ignore_prev_state_unavailable": "Previous state is unavailable",
			"ignore_prev_state_unknown": "Previous state is unknown",
			"ignore_state_change_event_when": "Ignore state change event when:",
			"name": "Name",
			"output_on_connect": "Output on Connect",
			"output_only_on_state_change": "Current state equals previous state",
			"server": "Server",
			"state_type": "State Type",
			"state_type_option": {
				"boolean": "boolean",
				"number": "number",
				"string": "string"
			}
		}
	},
	"ha-fire-event": {
		"label": {
			"data": "Data",
			"event": "Event",
			"name": "Name",
			"server": "Server"
		}
	},
	"ha-get-entities": {
		"label": {
			"max_results": "Max number of results",
			"name": "Name",
			"output_location": "Output location",
			"output_type": "Output Type",
			"output_type_option": {
				"array": "array",
				"count": "count",
				"random": "random",
				"split": "split"
			},
			"send_empty_results": "Send empty results",
			"server": "Server"
		},
		"status": {
			"no_results": "no results",
			"number_of_results": "__count__ entities",
			"number_of_random_resuls": "__count__ random"
		}
	},
	"api-get-history": {
		"error": {
			"invalid_relative_time": "Invalid relative time",
			"no_entity_ids_matched": "No entity IDs matched"
		},
		"label": {
			"date_format": "dates must be in ISO format",
			"end_date": "End date",
			"entity_id": "Entity ID",
			"entity_id_option": {
				"regex": "regex",
				"equal": "=="
			},
			"example": "example",
			"flatten_results": "Flatten results",
			"in_the_last": "In the last",
			"name": "Name",
			"output_location": "Output location",
			"output_type": "Output type",
			"output_type_option": {
				"array": "array",
				"split": "split"
			},
			"server": "Server",
			"start_date": "Start date",
			"use_relative_time": "Use relative time"
		},
		"placeholder": {
			"relative_time": "20 minutes"
		},
		"status": {
			"no_results": "no results",
			"requesting": "requesting"
		}
	},
	"ha-number": {
		"error": {
			"value_not_number": "The state is not a number",
			"mode_not_supported": "Mode not supported"
		},
		"label": {
			"entity_config": "Entity config",
			"mode": "Mode",
			"mode_option": {
				"in": "listen for changes",
				"out": "set value"
			},
			"name": "Name",
			"value": "Value"
		}
	},
	"poll-state": {
		"error": {
			"entity_id_not_found": "could not find entity with entity ID: __entity_id__",
			"entity_id_required": "An entity ID is required",
			"interval_not_a_number": "Interval is not a number: __interval__"
		},
		"label": {
			"entity_id": "Entity ID",
			"if_state": "If State",
			"if_state_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"name": "Name",
			"output_on_change": "Output on change",
			"output_on_connect": "Output on connect",
			"server": "Server",
			"state_type": "State Type",
			"state_type_option": {
				"boolean": "boolean",
				"number": "number",
				"string": "string"
			},
			"update_interval": "Update Interval",
			"update_interval_option": {
				"hours": "hours",
				"minutes": "minutes",
				"seconds": "seconds"
			}
		},
		"output_label": {
			"if_state_false": "if state is false",
			"if_state_true": "if state is true"
		}
	},
	"api-render-template": {
		"label": {
			"name": "Name",
			"results": "Results",
			"server": "Server",
			"template": "Template"
		},
		"status": {
			"requesting": "Requesting"
		}
	},
	"ha-select": {
		"error": {
			"invalid_value": "Option value does not exist in the list of options",
			"mode_not_supported": "Mode not supported"
		},
		"label": {
			"entity_config": "Entity config",
			"mode": "Mode",
			"mode_option": {
				"in": "listen for changes",
				"out": "set value"
			},
			"name": "Name",
			"value": "Value"
		}
	},
	"ha-sensor": {
		"label": {
			"entity_config": "Entity config",
			"input_override": "Input Override",
			"input_override_option": {
				"allow": "allow",
				"block": "block",
				"merge": "merge"
			},
			"name": "Name",
			"resend": "Resend state and attributes",
			"state": "State"
		}
	},
	"ha-sentence": {
		"error": {
			"missing_response_id": "_sentence_response_id was not found in the message object"
		},
		"label": {
			"fallback_response": "Fallback Response",
			"mode": "Mode",
			"mode_option": {
				"response": "response",
				"trigger": "trigger"
			},
			"name": "Name",
			"response": "Response",
			"response_type": "Response Type",
			"response_type_option": {
				"dynamic": "dynamic",
				"fixed": "fixed"
			},
			"sentences": "Sentences",
			"server": "Server",
			"timeout": "Timeout"
		}
	},
	"ha-switch": {
		"label": {
			"enable_input": "Enable input",
			"entity_config": "Entity config",
			"name": "Name",
			"output_on_state_change": "Output on state change"
		},
		"status": {
			"triggered": "triggered"
		}
	},
	"ha-tag": {
		"errors": {
			"no_tags_found": "No tags found in Home Assistant"
		},
		"label": {
			"all_tags": "ALL TAGS",
			"device_id": "Device ID",
			"devices": "Devices",
			"expose_as": "Expose as",
			"name": "Name",
			"server": "Server",
			"tag": "Tag",
			"tags": "Tags",
			"update_tag_list": "update tag list"
		}
	},
	"ha-text": {
		"error": {
			"mode_not_supported": "Mode not supported"
		},
		"label": {
			"entity_config": "Entity config",
			"mode": "Mode",
			"mode_option": {
				"get": "get value",
				"listen": "listen for changes",
				"set": "set value"
			},
			"name": "Name",
			"text": "Text"
		}
	},
	"ha-time": {
		"error": {
			"in_the_past": "Date is in the past: __date__",
			"invalid_date": "Invalid date: __date__",
			"invalid_jsonata_payload": "Invalid JSONata sending entity state as payload",
			"jsonata_error": "JSONata Error: __message__",
			"no_days_selected": "No days selected",
			"offset_nan": "Offset is not a number: __offset__"
		},
		"label": {
			"entity_id": "Entity ID",
			"friday": "Friday",
			"ignore_past_date": "Ignore past date errors",
			"monday": "Monday",
			"name": "Name",
			"offset": "Offset",
			"offset_unit_option": {
				"hours": "hours",
				"minutes": "minutes",
				"seconds": "seconds"
			},
			"payload": "Payload",
			"property": "Property",
			"randomize_offset": "Randomize time within the offset",
			"repeat_daily": "Repeat Daily",
			"saturday": "Saturday",
			"server": "Server",
			"show_debug": "Show Debug Information",
			"sunday": "Sunday",
			"thursday": "Thursday",
			"tuesday": "Tuesday",
			"wednesday": "Wednesday"
		},
		"status": {
			"error": "Error",
			"in_the_past": "In the past",
			"invalid_date": "Invalid date",
			"invalid_property": "Invalid property",
			"next_at": "Next at __nextTime__",
			"sent": "Sent",
			"sent_and_next": "Sent at __sentTime__ Next at __nextTime__",
			"unavailable": "Unavailable"
		}
	},
	"ha-time-entity": {
		"error": {
			"invalid_format": "Time value must be in 24-hour format HH:MM[:SS]"
		},
		"label": {
			"entity_config": "Entity config",
			"mode": "Mode",
			"mode_option": {
				"get": "get value",
				"listen": "listen for changes",
				"set": "set value"
			},
			"name": "Name",
			"value": "Value"
		}
	},
	"trigger-state": {
		"error": {
			"custom_output_message_needs_to_be_object": "Custom output message needs to be an key/value object",
			"entity_id_not_found": "Entity \"__entity_id__\" not found",
			"entity_required": "An entity is required"
		},
		"label": {
			"comparator_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"comparator_property_value_option": {
				"always": "always",
				"if_prev_state": "if previous state",
				"if_property": "if property",
				"if_state": "if state"
			},
			"conditions": "Conditions",
			"enable_input": "Enable input",
			"entity": "Entity",
			"entity_filter_type_option": {
				"exact": "exact",
				"list": "list",
				"regex": "regex",
				"substring": "substring"
			},
			"message_value_option": {
				"custom": "custom message",
				"custom_payload": "custom payload",
				"default": "default message"
			},
			"name": "Name",
			"output_on_connect": "Output on connect",
			"server": "Server",
			"show_debug": "Show debug information",
			"state_type": "State Type",
			"state_type_option": {
				"boolean": "boolean",
				"number": "number",
				"string": "string"
			},
			"target_type_option": {
				"current_state": "current state",
				"previous_state": "previous state",
				"property": "property"
			},
			"target_value_option": {
				"entity_id": "entity id",
				"this_entity": "this entity"
			}
		}
	},
	"ha-update-config": {
		"label": {
			"entity_config": "Entity Config",
			"name": "Name",
			"server": "Server"
		}
	},
	"ha-wait-until": {
		"error": {
			"entity_id_deprecated": "The `entityId` property is deprecated and will be removed in version 1.0. Please update your code to use the `entities` property instead.",
			"entity_not_found": "Entity (__entityId__) could not be found",
			"no_entities_provided": "At least one entity must be provided",
			"not_found": "not found",
			"invalid_timeout": "Invalid value for timeout: __timeout__"
		},
		"label": {
			"block_input_overrides": "Block input overrides",
			"check_current_state": "Check against current state",
			"comparator_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"entity": "Entity",
			"entity_filter_type_option": {
				"exact": "exact",
				"list": "list",
				"regex": "regex",
				"substring": "substring"
			},
			"name": "Name",
			"server": "Server",
			"timeout": "Timeout",
			"timeout_units_option": {
				"days": "days",
				"hours": "hours",
				"milliseconds": "milliseconds",
				"minutes": "minutes",
				"seconds": "seconds"
			},
			"wait_until": "Wait until"
		},
		"placeholder": {
			"property": "property",
			"value": "value"
		},
		"status": {
			"timed_out": "timed out",
			"true": "true",
			"waiting": "waiting"
		}
	},
	"ha-webhook": {
		"label": {
			"allowed_methods": "Allowed Methods",
			"get": "GET",
			"head": "HEAD",
			"id": "ID",
			"name": "Name",
			"post": "POST",
			"put": "PUT",
			"server": "Server"
		}
	},
	"ha-zone": {
		"label": {
			"event": "Event",
			"name": "Name",
			"option": {
				"enter": "enter",
				"enter_or_leave": "enter or leave",
				"leave": "leave"
			},
			"server": "Server"
		}
	}
}