{"version":3,"sources":["modbus-flex-fc.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","internalDebugLog","createNode","this","name","topic","showStatusActivities","showErrors","showWarnings","connection","verboseLogging","fc","settings","verbose","responseCard","node","requestCard","statusText","verboseWarn","logMessage","modbusClient","adr","setNodeStatusWithTimeTo","onModbusInit","id","getNode","server","httpAdmin","statusValue","statusOptions","setNodeStatusProperties","filename","status","fs","resolve","fill","readFile","path","filapath","error","newStatusText","res","onModbusConnect","serialSendingAllowed","onModbusActive","failureMsg","onModbusQueue","onModbusReadDone","warn","onModbusClose","onModbusReadError","err","message","setModbusError","msg","errorProtocolMsg","from","messageId","getObjectId","sendEmptyMsgOnFail","modbusRead","client","removeListener","parseInt","on","deregisterForModbus","payload","sendingNodeId","onModbusError","onModbusBroken","onModbusRegister","shape","text","removeNodeListenerFromModbusClient","done","registerForModbus","post","auth","needsPermission","req","body","mapPath","existsSync","data","json","JSON","parse"],"mappings":"aAYAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,oBAAuB,EAAEE,QAAA,EAC9B,IAAAC,EAAYC,QAAA,iBAAA,EAGNC,EAASD,QAAQ,oBAAoB,EAF3CA,EAAQA,QAAsBF,OAAS,EAAA,oBAAA,EA6LvCD,EAAIK,MAAMC,aAAa,iBA3LvB,SAAuBC,GACvBP,EAAMQ,MAAAA,WAAmBL,KAAAA,CAAQ,EAG/BH,KAAIK,KAAMI,EAAAA,KAEVC,KAAKC,MAAOJ,EAAOI,MACnBD,KAAKE,OAAQL,EAAOK,OAGpBF,KAAKG,qBAAuBN,EAAOM,qBACnCH,KAAKI,WAAaP,EAAOO,WACzBJ,KAAKK,aAAeR,EAAOQ,aAC3BL,KAAKM,WAAa,KAGlBN,KAAKF,eAAgBD,EAAGC,eACxBE,KAAKO,iBAAiBjB,EAEtBU,KAAKQ,eAAclB,EAAAmB,SAAAC,QAEnBV,KAAKW,GAAAA,EAAYH,GAEjBR,KAAMY,YAAWf,EAAAgB,YACjBD,KAAKE,aAAajB,EAASc,aAG3B,IAAAC,EAASG,KAIT,SAAAA,EAAAC,GAEAD,EAAAA,SAAYL,SAAeE,EAAQP,cAC7BY,EAAAA,KAAAA,WAAmBtB,EAAcE,aAAce,EAAAM,GAAA,CAHrD,CAPAN,EAIEE,WAAgB,UAHlBK,EAIwBP,EAAGI,UAAU,EAUrCJ,EAAKQ,aAAeR,EAAYS,EAAA,EALhC,IAMEF,EAAAA,EAAuBxB,MAAC2B,QAAazB,EAAC0B,MAAA,EAqJ1CjC,SAAIkC,EAAeC,GACjB,IAAQC,EAAgBlC,EAAAmC,wBAAAF,EAAAb,EAAAT,oBAAA,EACdW,EAAWF,EAAAE,WAEfc,EAAWF,EAAYG,OACxBC,IAAmBC,GACtBnB,EAAAiB,OAAA,CACFG,KAAAN,EAAAM,KAEGC,MAASC,EAAaC,MACnBC,KAAKC,CAETC,CAAG,CAEL,CAlKCrB,IAKDL,EAACQ,aAAA,WAEDR,EAAwB,aAAY,CAPpC,EAEAA,EAQE2B,gBAAA,WAEApB,EAAiBqB,WAAAA,EARjB5B,EASEO,WAAAA,CARJ,EAYAP,EAAK6B,iBAAiB,WACpBtB,EAAAA,sBACDA,EAAA,YAAA,EAIAF,EAAAuB,sBAEGrB,EAAiB,WAAUuB,CAV/B,EAEA9B,EAYE6B,eAAA,WACDtB,EAAA,QAAA,CAEDP,EAEAA,EAAC+B,cAAA,WAED/B,EAAsB,OAAA,CAbtB,EAiBAA,EAAKgC,cAAgB,SAAGF,GACtBvB,EAAShB,SAAsB,EAC7BgB,EAAAA,YACFP,EAAAiC,KAAAH,CAAA,CAEF,EAbA9B,EAgBEkC,cAAmB,WAfnB3B,EAgBuBP,QAAS,CAflC,EAmBAA,EAAKmC,eAAiB,WACpBnC,EAAsBoC,QAAIC,CAhB5B,EAEArC,EAiBEpB,iBAAS0D,SAAqBjC,EAAAA,GA4EhC,IAEAA,EA7ECL,EAAAT,sBAEGgB,EAAc,cAAY,EAE1BA,EAAAA,KAyEJF,EAzE4BkC,EAyEZjD,OAAaU,EAAEA,MAE/BK,EAAAA,KAAY,CACZA,MAAAA,EACAA,QA7EIE,EA8EJF,MA9E4BkC,EA+E5BlC,cAAgBL,EAAAS,EAEhBJ,CAAAA,CAlGA,EAEAL,EAmBEwC,iBAAY,SAAAJ,EAAAG,GACVjD,EAAOE,YACPiD,EAAMzC,YAASA,EAAAoC,EAAAG,CAAA,CAjBnB,EAEAvC,EAAKmC,kBAmBmBlC,SAAWmC,EAAAG,GAlBjCvC,EAmBID,iBAAkBqC,EAACrC,OAAAA,EAlBvBC,EAmBI0C,iBAAkBC,EAAAA,CAAAA,EAlBtB/D,EAmBEgE,mBAAA5C,EAAAoC,EAAAG,CAAA,EACF3D,EAAC0D,eAAAtC,EAAAK,EAAA+B,EAAAG,CAAA,CAlBH,EAEAvC,EAoBE6C,WAAA,WAEAxC,IAMAA,EANAA,EAAkByC,QAMlBzC,EAAY,CACZA,MAAAA,WACAA,KAAAA,EAAa0C,KACb1C,QAAAA,CACAA,OAAY2C,SAACD,EAAAA,MAAe,EAC5B1C,GAAAA,SAAa0C,EAAAA,GAAAA,EAAe,EAC5B1C,YAAa0C,EAAAA,YACdhD,aAAAC,EAAAD,aAEIkD,UAAYnE,EAAA6D,YAAgB,CAC/B3C,CACAA,EAEAG,EAAAA,sBACAE,EAAa6C,SAAoBlD,EAIjCK,EAAckC,KAAIjD,sBAAmBiD,EAAAvC,EAAAgC,iBAAAhC,EAAAmC,iBAAA,GAvBtC5B,EAAA,SAAA,CAAD,EAEAP,EAyBImD,mCAAiB,WAxBnB9C,EAyBY0C,eAAA,SAAA/C,EAAAQ,YAAA,EAxBZH,EAyBE+C,eAAoB3C,UAAAA,EAAAA,aAAAA,EACtBJ,EAAE0C,eAAA,cAAA/C,EAAA2B,eAAA,EACJtB,EAAA0C,eAAA,WAAA/C,EAAA6B,cAAA,EAEAxB,EAASE,eAAAA,UAAyBM,EAAawC,aAAA,EAC7ChD,EAAMS,eAAwB,WAACC,EAAAA,aAAwBF,EACvDR,EAAMH,eAAkBA,WAAUF,EAAAsD,cAAA,EAElCjD,EAAMoB,eAAgBX,aAAoBd,EAAAuD,gBAAA,EAC1ClD,EAAIoB,eAAkBvB,eAAYF,EAAAkC,aAAA,CA1BpC,EAEA9C,KAAK6D,GA2BCO,QAAO1C,SAAc0C,GA1BzBxD,EA2BIyD,qBAAMhC,EA1BVzB,EA2BI0D,mCAAA,EACJnD,EAAA,QAAA,EACFJ,EAAA,cAAAH,EAAAS,EAAA,EAEAJ,EAASd,oBAAsBS,EAAAS,GAAAkD,CAAA,CA3B/B,CAAC,EA2BG3D,EAAKT,uBACPc,EAAa4C,GAAG,SAAUjD,EAAKQ,YAAY,EAC3CH,EAAa4C,GAAG,UAAWjD,EAAK+B,aAAa,GAG/C1B,EAAa4C,GAAG,cAAejD,EAAK2B,eAAe,EACnDtB,EAAa4C,GAAG,WAAYjD,EAAK6B,cAAc,EAC/CxB,EAAa4C,GAAG,UAAWjD,EAAKqD,aAAa,EAC7ChD,EAAa4C,GAAG,WAAYjD,EAAKkC,aAAa,EAC9C7B,EAAa4C,GAAG,WAAYjD,EAAKsD,cAAc,EAC/CjD,EAAa4C,GAAG,aAAcjD,EAAKuD,gBAAgB,EACnDlD,EAAa4C,GAAG,eAAgBjD,EAAKkC,aAAa,EAElD7B,EAAauD,kBAAkB5D,CAAI,EACrC,CAEqD,EAErDtB,EAAIkC,UAAUiD,KAAK,oBAAqBnF,EAAIoF,KAAKC,gBAAgB,aAAa,EAAG,SAAUC,EAAKtC,GAC9F,IAAMR,EAAKrC,QAAQ,IAAI,EACjByC,EAAOzC,QAAQ,WAAW,EAC1B0C,EAAWyC,EAAIC,KAAKC,SAAW,kCAC/BlD,EAAW,aACZE,EAAGiD,WAAW7C,EAAKH,QAAQI,EAAUP,CAAQ,CAAC,GAInDE,EAAGG,SAASC,EAAKH,QAAQI,EAAUP,CAAQ,EAAG,SAACQ,EAAO4C,GAChD5C,GAAOE,EAAI2C,KAAK,CAAC7C,EAAM,EAE3BE,EAAI2C,KAAKC,KAAKC,MAAMH,CAAI,CAAC,CAC3B,CAAC,CACH,CAAC,CACH","file":"../modbus-flex-fc.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n Copyright 2016 - Jason D. Harper, Argonne National Laboratory\n Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc.\n All rights reserved.\n node-red-contrib-modbus\n **/\n\n/**\n * Modbus Custom Function Code.\n * @module NodeRedModbusFlexFc\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const internalDebugLog = require('debug')('contribModbus:read')\n\n  function ModbusFlexFc (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.topic = config.topic\n    this.unitid = config.unitid\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.showWarnings = config.showWarnings\n    this.connection = null\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    this.fc = config.fc\n    this.requestCard = config.requestCard\n    this.responseCard = config.responseCard\n\n    const node = this\n    node.statusText = 'waiting'\n    setNodeStatusWithTimeTo(node.statusText)\n\n    function verboseWarn (logMessage) {\n      if (RED.settings.verbose && node.showWarnings) {\n        node.warn('Read -> ' + logMessage + ' address: ' + node.adr)\n      }\n    }\n\n    verboseWarn('open node ' + node.id)\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n\n    node.onModbusInit = function () {\n      setNodeStatusWithTimeTo('initialized')\n    }\n\n    node.onModbusConnect = function () {\n      setNodeStatusWithTimeTo('connected')\n      node.modbusRead()\n    }\n\n    node.onModbusRegister = function () {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('registered')\n      }\n\n      if (modbusClient.serialSendingAllowed) {\n        setNodeStatusWithTimeTo('connected')\n      }\n    }\n\n    node.onModbusActive = function () {\n      setNodeStatusWithTimeTo('active')\n    }\n\n    node.onModbusQueue = function () {\n      setNodeStatusWithTimeTo('queue')\n    }\n\n    node.onModbusError = function (failureMsg) {\n      setNodeStatusWithTimeTo('failure')\n      if (node.showErrors) {\n        node.warn(failureMsg)\n      }\n    }\n\n    node.onModbusClose = function () {\n      setNodeStatusWithTimeTo('closed')\n    }\n\n    node.onModbusBroken = function () {\n      setNodeStatusWithTimeTo('broken')\n    }\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('reading done')\n      }\n      sendMessage(resp.data, resp, msg)\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      node.errorProtocolMsg(err, msg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, msg)\n    }\n\n    node.modbusRead = function () {\n      if (!modbusClient.client) {\n        setNodeStatusWithTimeTo('waiting')\n        return\n      }\n\n      const msg = {\n        topic: 'customFc',\n        from: node.name,\n        payload: {\n          unitid: parseInt(node.unitid),\n          fc: parseInt(node.fc, 16),\n          requestCard: node.requestCard,\n          responseCard: node.responseCard,\n          messageId: mbCore.getObjectId()\n        }\n      }\n\n      if (node.showStatusActivities) {\n        setNodeStatusWithTimeTo('reading')\n      }\n\n      modbusClient.emit('customModbusMessage', msg, node.onModbusReadDone, node.onModbusReadError)\n    }\n\n    node.removeNodeListenerFromModbusClient = function () {\n      modbusClient.removeListener('mbinit', node.onModbusInit)\n      modbusClient.removeListener('mbqueue', node.onModbusQueue)\n      modbusClient.removeListener('mbconnected', node.onModbusConnect)\n      modbusClient.removeListener('mbactive', node.onModbusActive)\n      modbusClient.removeListener('mberror', node.onModbusError)\n      modbusClient.removeListener('mbclosed', node.onModbusClose)\n      modbusClient.removeListener('mbbroken', node.onModbusBroken)\n      modbusClient.removeListener('mbregister', node.onModbusRegister)\n      modbusClient.removeListener('mbderegister', node.onModbusClose)\n    }\n\n    this.on('close', function (done) {\n      node.resetAllReadingTimer()\n      node.removeNodeListenerFromModbusClient()\n      setNodeStatusWithTimeTo('closed')\n      verboseWarn('close node ' + node.id)\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    function sendMessage (values, response, msg) {\n      const topic = msg.topic || node.topic\n\n      node.send({\n        topic,\n        payload: response,\n        input: msg,\n        sendingNodeId: node.id\n      })\n    }\n\n    function setNodeStatusWithTimeTo (statusValue) {\n      const statusOptions = mbBasics.setNodeStatusProperties(statusValue, node.showStatusActivities)\n      const statusText = node.statusText\n\n      const newStatusText = statusOptions.status\n      if (newStatusText !== statusText) {\n        node.status({\n          fill: statusOptions.fill,\n          shape: statusOptions.shape,\n          text: newStatusText\n        })\n      }\n    }\n\n    if (node.showStatusActivities) {\n      modbusClient.on('mbinit', node.onModbusInit)\n      modbusClient.on('mbqueue', node.onModbusQueue)\n    }\n\n    modbusClient.on('mbconnected', node.onModbusConnect)\n    modbusClient.on('mbactive', node.onModbusActive)\n    modbusClient.on('mberror', node.onModbusError)\n    modbusClient.on('mbclosed', node.onModbusClose)\n    modbusClient.on('mbbroken', node.onModbusBroken)\n    modbusClient.on('mbregister', node.onModbusRegister)\n    modbusClient.on('mbderegister', node.onModbusClose)\n\n    modbusClient.registerForModbus(node)\n  }\n\n  RED.nodes.registerType('modbus-flex-fc', ModbusFlexFc)\n\n  RED.httpAdmin.post('/modbus/fc/si/:id', RED.auth.needsPermission('modbus.read'), function (req, res) {\n    const fs = require('fs')\n    const path = require('node:path')\n    const filapath = req.body.mapPath || './extras/argumentMaps/defaults/'\n    const filename = 'codes.json'\n    if (!fs.existsSync(path.resolve(filapath, filename))) {\n      return\n    }\n\n    fs.readFile(path.resolve(filapath, filename), (error, data) => {\n      if (error) res.json([error])\n\n      res.json(JSON.parse(data))\n    })\n  })\n}\n"]}