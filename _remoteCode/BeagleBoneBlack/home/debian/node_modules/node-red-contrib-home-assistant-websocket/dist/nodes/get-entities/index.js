"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const helpers_1 = require("../../common/controllers/helpers");
const ComparatorService_1 = __importDefault(require("../../common/services/ComparatorService"));
const InputService_1 = __importDefault(require("../../common/services/InputService"));
const Status_1 = __importDefault(require("../../common/status/Status"));
const TransformState_1 = __importDefault(require("../../common/TransformState"));
const const_1 = require("../../const");
const globals_1 = require("../../globals");
const migrate_1 = require("../../helpers/migrate");
const node_1 = require("../../helpers/node");
const homeAssistant_1 = require("../../homeAssistant");
const const_2 = require("./const");
const GetEntitiesController_1 = __importDefault(require("./GetEntitiesController"));
const inputs = {
    outputType: {
        messageProp: 'payload.outputType',
        configProp: 'outputType',
    },
    outputEmptyResults: {
        messageProp: 'payload.outputEmptyResults',
        configProp: 'outputEmptyResults',
    },
    outputLocationType: {
        messageProp: 'payload.outputLocationType',
        configProp: 'outputLocationType',
    },
    outputLocation: {
        messageProp: 'payload.outputLocation',
        configProp: 'outputLocation',
    },
    outputResultsCount: {
        messageProp: 'payload.outputResultsCount',
        configProp: 'outputResultsCount',
    },
    rules: {
        messageProp: 'payload.rules',
        configProp: 'rules',
    },
};
// convert enum to array of strings
const inputSchema = joi_1.default.object({
    outputType: joi_1.default.string()
        .valid(...Object.values(const_2.OutputType))
        .label('OutputType'),
    outputEmptyResults: joi_1.default.boolean().label('outputEmptyResults'),
    outputLocationType: joi_1.default.string()
        .valid(const_1.TypedInputTypes.Message, const_1.TypedInputTypes.Flow, const_1.TypedInputTypes.Global)
        .label('outputLocationType'),
    outputLocation: joi_1.default.string().label('outputLocation'),
    outputResultsCount: joi_1.default.number().label('outputResultsCount'),
    rules: joi_1.default.array()
        .items(joi_1.default.object({
        property: joi_1.default.when('logic', {
            is: const_1.ComparatorType.JSONata,
            then: joi_1.default.any(),
            otherwise: joi_1.default.string(),
        }),
        logic: joi_1.default.string().valid(const_1.ComparatorType.Is, const_1.ComparatorType.IsNot, const_1.ComparatorType.IsLessThan, const_1.ComparatorType.IsLessThanOrEqual, const_1.ComparatorType.IsGreaterThan, const_1.ComparatorType.IsGreaterThanOrEqual, const_1.ComparatorType.Includes, const_1.ComparatorType.DoesNotInclude, const_1.ComparatorType.StartsWith, const_1.ComparatorType.InGroup, const_1.ComparatorType.JSONata),
        value: joi_1.default.string(),
        valueType: joi_1.default.string().valid(const_1.TypedInputTypes.String, const_1.TypedInputTypes.Number, const_1.TypedInputTypes.Boolean, const_1.TypedInputTypes.Regex, const_1.TypedInputTypes.JSONata, const_1.TypedInputTypes.Message, const_1.TypedInputTypes.Flow, const_1.TypedInputTypes.Global, const_1.TypedInputTypes.Entity),
    }))
        .label('rules'),
});
function getEntitiesNode(config) {
    globals_1.RED.nodes.createNode(this, config);
    this.config = (0, migrate_1.migrate)(config);
    const serverConfigNode = (0, node_1.getServerConfigNode)(this.config.server);
    const homeAssistant = (0, homeAssistant_1.getHomeAssistant)(serverConfigNode);
    const status = new Status_1.default({
        config: serverConfigNode.config,
        node: this,
    });
    const inputService = new InputService_1.default({
        inputs,
        nodeConfig: this.config,
        schema: inputSchema,
    });
    const controllerDeps = (0, helpers_1.createControllerDependencies)(this, homeAssistant);
    const transformState = new TransformState_1.default(serverConfigNode.config.ha_boolean);
    const comparatorService = new ComparatorService_1.default({
        nodeRedContextService: controllerDeps.nodeRedContextService,
        homeAssistant,
        jsonataService: controllerDeps.jsonataService,
        transformState,
    });
    // eslint-disable-next-line no-new
    new GetEntitiesController_1.default({
        comparatorService,
        inputService,
        node: this,
        status,
        ...controllerDeps,
    });
}
exports.default = getEntitiesNode;
