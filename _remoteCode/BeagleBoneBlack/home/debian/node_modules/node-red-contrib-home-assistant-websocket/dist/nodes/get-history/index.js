"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const helpers_1 = require("../../common/controllers/helpers");
const InputService_1 = __importDefault(require("../../common/services/InputService"));
const Status_1 = __importDefault(require("../../common/status/Status"));
const globals_1 = require("../../globals");
const migrate_1 = require("../../helpers/migrate");
const node_1 = require("../../helpers/node");
const homeAssistant_1 = require("../../homeAssistant");
const const_1 = require("./const");
const GetHistoryController_1 = __importDefault(require("./GetHistoryController"));
const inputs = {
    startDate: {
        messageProp: ['payload.startDate'],
        configProp: 'startDate',
    },
    endDate: {
        messageProp: ['payload.endDate'],
        configProp: 'endDate',
    },
    entityId: {
        messageProp: ['payload.entityId'],
        configProp: 'entityId',
    },
    entityIdType: {
        messageProp: ['payload.entityIdType'],
        configProp: 'entityIdType',
    },
    relativeTime: {
        messageProp: ['payload.relativeTime'],
        configProp: 'relativeTime',
    },
    flatten: {
        messageProp: ['payload.flatten'],
        configProp: 'flatten',
    },
};
const inputSchema = joi_1.default.object({
    startDate: joi_1.default.date().optional().allow(''),
    endDate: joi_1.default.date().optional().allow(''),
    entityId: joi_1.default.string().optional(),
    entityIdType: joi_1.default.string()
        .valid(...Object.values(const_1.EntityFilterType))
        .optional(),
    relativeTime: joi_1.default.string().optional().allow(''),
    flatten: joi_1.default.boolean().optional(),
});
function getHistoryNode(config) {
    globals_1.RED.nodes.createNode(this, config);
    this.config = (0, migrate_1.migrate)(config);
    const serverConfigNode = (0, node_1.getServerConfigNode)(this.config.server);
    const homeAssistant = (0, homeAssistant_1.getHomeAssistant)(serverConfigNode);
    const status = new Status_1.default({
        config: serverConfigNode.config,
        node: this,
    });
    const inputService = new InputService_1.default({
        inputs,
        nodeConfig: this.config,
        schema: inputSchema,
    });
    const controllerDeps = (0, helpers_1.createControllerDependencies)(this, homeAssistant);
    // eslint-disable-next-line no-new
    new GetHistoryController_1.default({
        inputService,
        node: this,
        status,
        ...controllerDeps,
    });
}
exports.default = getHistoryNode;
