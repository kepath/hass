"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const InputOutputController_1 = __importDefault(require("../../common/controllers/InputOutputController"));
const NoConnectionError_1 = __importDefault(require("../../common/errors/NoConnectionError"));
const const_1 = require("../../const");
const mustache_1 = require("../../helpers/mustache");
class FireEventController extends InputOutputController_1.default {
    async onInput({ message, parsedMessage, send, done, }) {
        if (!this.homeAssistant.websocket.isConnected) {
            throw new NoConnectionError_1.default();
        }
        const eventType = (0, mustache_1.renderTemplate)(parsedMessage.event.value, message, this.node.context(), this.homeAssistant.websocket.getStates());
        let eventData;
        if (parsedMessage.data.value) {
            if (parsedMessage.dataType.value === const_1.TypedInputTypes.JSONata) {
                eventData = await this.jsonataService.evaluate(parsedMessage.data.value, {
                    message,
                });
            }
            else {
                const dataString = (0, mustache_1.renderTemplate)(typeof parsedMessage.data.value === 'object'
                    ? JSON.stringify(parsedMessage.data.value)
                    : parsedMessage.data.value, message, this.node.context(), this.homeAssistant.websocket.getStates());
                try {
                    eventData = JSON.parse(dataString);
                }
                catch (e) {
                    eventData = dataString;
                }
            }
        }
        this.node.debug(`Fire Event: ${eventType} -- ${JSON.stringify({})}`);
        this.status.setSending();
        await this.homeAssistant.websocket.send({
            type: 'fire_event',
            event_type: eventType,
            event_data: eventData,
        });
        this.status.setSuccess(eventType);
        send(message);
        done();
    }
}
exports.default = FireEventController;
