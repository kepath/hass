"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const helpers_1 = require("../../common/controllers/helpers");
const inputErrorHandler_1 = require("../../common/errors/inputErrorHandler");
const ClientEvents_1 = __importDefault(require("../../common/events/ClientEvents"));
const InputService_1 = __importDefault(require("../../common/services/InputService"));
const Status_1 = __importDefault(require("../../common/status/Status"));
const globals_1 = require("../../globals");
const migrate_1 = require("../../helpers/migrate");
const node_1 = require("../../helpers/node");
const homeAssistant_1 = require("../../homeAssistant");
const Websocket_1 = require("../../homeAssistant/Websocket");
const CallServiceController_1 = __importDefault(require("./CallServiceController"));
const const_1 = require("./const");
const inputs = {
    domain: {
        messageProp: 'payload.domain',
        configProp: 'domain',
    },
    service: {
        messageProp: 'payload.service',
        configProp: 'service',
    },
    target: {
        messageProp: 'payload.target',
    },
    data: {
        messageProp: 'payload.data',
        configProp: 'data',
        default: {},
    },
};
const inputSchema = joi_1.default.object({
    domain: joi_1.default.string().required(),
    service: joi_1.default.string().required(),
    data: joi_1.default.alternatives(joi_1.default.string().allow(''), joi_1.default.object()).required(),
    target: joi_1.default.object().keys({
        area_id: joi_1.default.alternatives(joi_1.default.string(), joi_1.default.array().optional()),
        device_id: joi_1.default.alternatives(joi_1.default.string(), joi_1.default.array().optional()),
        entity_id: joi_1.default.alternatives(joi_1.default.string(), joi_1.default.array().optional()),
    }),
});
function callServiceNode(config) {
    globals_1.RED.nodes.createNode(this, config);
    this.config = (0, migrate_1.migrate)(config);
    const serverConfigNode = (0, node_1.getServerConfigNode)(this.config.server);
    const homeAssistant = (0, homeAssistant_1.getHomeAssistant)(serverConfigNode);
    const status = new Status_1.default({
        config: serverConfigNode.config,
        node: this,
    });
    const inputService = new InputService_1.default({
        inputs,
        nodeConfig: this.config,
        schema: inputSchema,
    });
    const controllerDeps = (0, helpers_1.createControllerDependencies)(this, homeAssistant);
    const controller = new CallServiceController_1.default({
        inputService,
        node: this,
        status,
        ...controllerDeps,
    });
    // Handle queue items when HA reconnected and in the running state
    if (this.config.queue !== const_1.Queue.None) {
        if (homeAssistant.isHomeAssistantRunning) {
            try {
                controller.onClientReady();
            }
            catch (e) {
                (0, inputErrorHandler_1.inputErrorHandler)(e, { status });
            }
        }
        const clientEvents = new ClientEvents_1.default({
            node: this,
            emitter: homeAssistant.eventBus,
        });
        clientEvents.addListener(Websocket_1.ClientEvent.Ready, controller.onClientReady.bind(controller));
    }
}
exports.default = callServiceNode;
