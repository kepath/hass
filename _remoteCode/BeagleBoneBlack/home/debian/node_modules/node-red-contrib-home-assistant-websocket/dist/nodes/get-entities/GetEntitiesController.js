"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _GetEntitiesController_comparatorService, _GetEntitiesController_homeAssistant;
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const selectn_1 = __importDefault(require("selectn"));
const InputOutputController_1 = __importDefault(require("../../common/controllers/InputOutputController"));
const SendSplitMixin_1 = __importDefault(require("../../common/controllers/SendSplitMixin"));
const const_1 = require("./const");
const SendSplitController = (0, SendSplitMixin_1.default)((InputOutputController_1.default));
class GetEntitiesController extends SendSplitController {
    constructor(params) {
        super(params);
        _GetEntitiesController_comparatorService.set(this, void 0);
        _GetEntitiesController_homeAssistant.set(this, void 0);
        __classPrivateFieldSet(this, _GetEntitiesController_comparatorService, params.comparatorService, "f");
        __classPrivateFieldSet(this, _GetEntitiesController_homeAssistant, params.homeAssistant, "f");
    }
    async onInput({ message, parsedMessage, send, done, }) {
        let noPayload = false;
        const states = __classPrivateFieldGet(this, _GetEntitiesController_homeAssistant, "f").websocket.getStates();
        const entities = [];
        const entityArray = Object.values(states);
        for (const entity of entityArray) {
            const rules = parsedMessage.rules.value;
            entity.timeSinceChangedMs =
                Date.now() - new Date(entity.last_changed).getTime();
            let entityMatched = true;
            for (const rule of rules) {
                const value = (0, selectn_1.default)(rule.property, entity);
                const result = await __classPrivateFieldGet(this, _GetEntitiesController_comparatorService, "f").getComparatorResult(rule.logic, rule.value, value, rule.valueType, {
                    message,
                    entity,
                });
                if ((rule.logic !== 'jsonata' && value === undefined) ||
                    !result) {
                    entityMatched = false;
                    break;
                }
            }
            if (entityMatched) {
                entities.push(entity);
            }
        }
        let statusText = [
            'ha-get-entities.status.number_of_results',
            { count: entities.length },
        ];
        let payload = [];
        switch (parsedMessage.outputType.value) {
            case const_1.OutputType.Count:
                payload = entities.length;
                break;
            case const_1.OutputType.Split:
                if (entities.length === 0) {
                    noPayload = true;
                    break;
                }
                this.status.setSuccess(statusText);
                this.sendSplit(message, entities, send);
                done();
                return;
            case const_1.OutputType.Random: {
                if (entities.length === 0) {
                    noPayload = true;
                    break;
                }
                const maxReturned = Number(parsedMessage.outputResultsCount.value) || 1;
                const max = entities.length <= maxReturned
                    ? entities.length
                    : maxReturned;
                const shuffledEntities = (0, lodash_1.shuffle)(entities);
                payload = shuffledEntities.slice(0, max);
                if (maxReturned === 1) {
                    payload = payload[0];
                    statusText = [
                        'ha-get-entities.status.number_of_random_resuls',
                        { count: 1 },
                    ];
                }
                else {
                    statusText = [
                        'ha-get-entities.status.number_of_random_resuls',
                        { count: Array.isArray(payload) ? payload.length : 0 },
                    ];
                }
                break;
            }
            case const_1.OutputType.Array:
            default:
                if (entities.length === 0 &&
                    !parsedMessage.outputEmptyResults.value) {
                    noPayload = true;
                }
                payload = entities;
                break;
        }
        if (noPayload) {
            this.status.setFailed('ha-get-entities.status.no_results');
            done();
            return;
        }
        this.status.setSuccess(statusText);
        this.contextService.set(payload, parsedMessage.outputLocationType.value, parsedMessage.outputLocation.value, message);
        send(message);
        done();
    }
}
_GetEntitiesController_comparatorService = new WeakMap(), _GetEntitiesController_homeAssistant = new WeakMap();
exports.default = GetEntitiesController;
