---
custom_card_kepath_binary_sensor_count:
  template:
    - "ulm_translation_engine"
    - "icon_info_bg"
    - "custom_popup_entity_list"
  icon: "mdi:lightbulb"
  show_icon: true
  show_label: false
  show_name: false
  group_expand: true
  styles:
    grid:
      - grid-template-areas: "'i' 'i' 'l'"
      - grid-template-rows: "min-content min-content"
      - justify-items: "center"
    icon:
      - width: "20px"
    card:
      - padding: "5px"
      - background-color: "var(--card-background-color)"
    custom_fields:
      warning:
        - position: "absolute"
        - left: "30px"
        - top: "2px"
      amount:
        - position: "absolute"
        - left: "30px"
        - top: "32px"

  custom_fields:
    warning:
      card:
        type: "custom:button-card"
        styles:
          icon:
            - width: "14px"
            - height: "14px"
            - line-height: "0"
            - color: "rgba(var(--color-red),1)"
          img_cell:
            - border-radius: "50%"
            - background-color: "var(--card-background-color)"
            - height: "16px"
            - width: "16px"
            - border: "2px solid var(--card-background-color)"
          card:
            - height: "100%"
            - box-shadow: "none"
            - padding: "0px"
            - border-radius: "50%"
        icon: >
          [[[
            var amountValue = 0;
            var icon = "mdi:numeric-0-circle"
            if (variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.subtype == "state") {
              amountValue = states[variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.entity].state
            }
            else {
              amountValue = states[variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.entity].attributes[variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.value]
            }
            if (!isNaN(amountValue) && amountValue !== undefined){
              if (amountValue > 9) {
                var amountValue = "9-plus"
              }
              icon = icon.replace("0",amountValue)
            }
            return icon;
          ]]]
        state:
          - operator: "template"
            value: >
              [[[
                var isZeroValue = true;
                var amountValue = 0;
                if (variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.subtype == "state") {
                  amountValue = states[variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.entity].state;
                }
                else {
                  amountValue = states[variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.entity].attributes[variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.value];
                }
                if (!isNaN(amountValue) && amountValue != 0 && amountValue !== undefined) {
                  isZeroValue = false;
                }
                return isZeroValue;
              ]]]
            styles:
              card:
                - display: "none"

    amount:
      card:
        type: "custom:button-card"
        styles:
          icon:
            - width: "14px"
            - height: "14px"
            - line-height: "0"
            - color: "rgba(var(--color-red),1)"
          img_cell:
            - border-radius: "50%"
            - background-color: "var(--card-background-color)"
            - height: "16px"
            - width: "16px"
            - border: "2px solid var(--card-background-color)"
          card:
            - height: "100%"
            - box-shadow: "none"
            - padding: "0px"
            - border-radius: "50%"
        icon: >
          [[[
            var amountValue = 0;
            var icon = "mdi:numeric-0-circle"
            if (variables.ulm_card_kepath_binary_sensor_count_notifications.amount.subtype == "state") {
              amountValue = states[variables.ulm_card_kepath_binary_sensor_count_notifications.amount.entity].state
            }
            else {
              amountValue = states[variables.ulm_card_kepath_binary_sensor_count_notifications.amount.entity].attributes[variables.ulm_card_kepath_binary_sensor_count_notifications.amount.value]
            }
            if (!isNaN(amountValue) && amountValue !== undefined){
              if (amountValue > 9) {
                var amountValue = "9-plus"
              }
              icon = icon.replace("0",amountValue)
            }
            return icon;
          ]]]
        state:
          - operator: "template"
            value: >
              [[[
                var isZeroValue = true;
                var amountValue = 0;
                if (variables.ulm_card_kepath_binary_sensor_count_notifications.amount.subtype == "state") {
                  amountValue = states[variables.ulm_card_kepath_binary_sensor_count_notifications.amount.entity].state;
                }
                else {
                  amountValue = states[variables.ulm_card_kepath_binary_sensor_count_notifications.amount.entity].attributes[variables.ulm_card_kepath_binary_sensor_count_notifications.amount.value];
                }
                if (!isNaN(amountValue) && amountValue != 0 && amountValue !== undefined) {
                  isZeroValue = false;
                }
                return isZeroValue;
              ]]]
            styles:
              card:
                - display: "none"


custom_popup_entity_list:
  tap_action:
    action: >
      [[[
        if (variables.ulm_card_kepath_binary_sensor_count_popup.type == 'navigate') {
          return "navigate";
        } else {
          return "fire-dom-event";
        }
      ]]]
    navigation_path: "[[[ return variables.ulm_card_kepath_binary_sensor_count_popup.type == 'navigate' ? variables.ulm_card_kepath_binary_sensor_count_popup.page : '/0' ]]]"
    browser_mod:
      service: "browser_mod.popup"
      data:
        title: "[[[return variables.ulm_card_kepath_binary_sensor_count_popup.type + ' entities']]]"
        style:
          $: >
            [[[
              if (hass.themes.theme.includes("desktop")){
                var dialog = `
                  .mdc-dialog__surface{
                    border-radius: var(--border-radius) !important;
                  }
                `;
              } else{
                var dialog = "";
              }
              return `
                *{
                  --secondary-background-color: none !important;
                }
                ${dialog}
              `;
            ]]]
          hui-vertical-stack-card:
            $: >
              div.main-title::first-letter {
                text-transform:capitalize;
              }
              button-card {
                align-self: center;
                padding: 0.2em 0 2.3em 0;
              }
              hui-entities-card{
                padding: 0.8em 1.4em;
              }
            $hui-entities-card$: >
              ha-card{
                box-shadow: none;
              }
            $hui-history-graph-card$: >
              .content {
                padding: 0 2.4em !important;
              }
              ha-card{
                box-shadow: none;
              }
            $hui-glance-card$: >
              ha-card{
                box-shadow: none;
              }
            $hui-map-card:
              $: >
                ha-icon-button {
                  color: rgba(var(--color-blue),1);
                }
              $ha-map:
                $: >
                  .leaflet-control-attribution {
                    display: none;
                  }
                  .leaflet-touch .leaflet-control-layers, .leaflet-touch .leaflet-bar {
                    border: 2px solid rgba(var(--color-blue),0.4) !important;
                  }
                  .leaflet-bar a {
                    background-color: rgba(var(--color-blue),0.2) !important;
                    color: rgba(var(--color-blue),1) !important;
                  }
                  .leaflet-bar a:first-child {
                    border-bottom: 2px solid rgba(var(--color-blue),0.4) !important;
                  }
                  .leaflet-pane.leaflet-tile-pane {
                    filter: contrast(95%);
                  }
        content:
          type: "vertical-stack"
          cards:
            - type: "custom:auto-entities"
              card:
                type: "entities"
              filter:
                include:
                  - group: "[[[ return entity.entity_id ]]]"
              sort:
                method: "state"
                reverse: true
  hold_action:
    action: "more-info"

# https://github.com/custom-cards/button-card#Action
# https://github.com/thomasloven/hass-browser_mod

# https://github.com/thomasloven/lovelace-state-switch
# https://github.com/thomasloven/lovelace-auto-entities
