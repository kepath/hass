---
custom_card_kepath_binary_sensor_count:
  template:
    - "icon_info_bg"
    - "ulm_translation_engine"
    - "custom_popup_auto_entities_list"
  variables:
    auto_entities_sort_method: >
      [[[
        var autoEntitiesSortMethod = "state";
        const sort_methods = ['domain', 'entity_id', 'name', 'device', 'area', 'state', 'last_changed', 'last_updated', 'last_triggered'];
        if (variables?.ulm_card_kepath_binary_sensor_count_notifications?.auto_entities_sort_method) {
          for (let i = 0; i < sort_methods.length; i++) {
            if (sort_methods[i] == variables.ulm_card_kepath_binary_sensor_count_notifications.auto_entities_sort_method) {
              autoEntitiesSortMethod = sort_methods[i];
            }
          }
        }
        return autoEntitiesSortMethod;
      ]]]
    auto_entities_sort_reversed: >
      [[[
        var autoEntitiesSortReversed = false;
        if (variables?.ulm_card_kepath_binary_sensor_count_notifications?.auto_entities_sort_reversed) {
          if (typeof variables.ulm_card_kepath_binary_sensor_count_notifications.auto_entities_sort_reversed === "boolean") {
            autoEntitiesSortReversed = variables.ulm_card_kepath_binary_sensor_count_notifications.auto_entities_sort_reversed;
          }
        }
        return autoEntitiesSortReversed;
      ]]]
  icon: "mdi:lightbulb"
  show_icon: true
  show_label: false
  show_name: true
  group_expand: true
  styles:
    grid:
      - grid-template-areas: "'i' 'n'"
      - grid-template-rows: "1fr min-content"
      - grid-template-columns: "1fr"
      - justify-items: "center"
    icon:
      - width: "20px"
    card:
      - box-shadow: "none"
      - border-radius: "none"
      - padding: "5px"
    name:
      - place-self: "center"
      - font-weight: "bold"
      - font-size: "10px"
      - text-overflow: "ellipsis"
      - overflow: "hidden"
      - padding-top: "10px"
      - margin: "0"
      - min-width: "20px"
      - color: "var(--primary-text-color)"
    custom_fields:
      warning:
        - position: "absolute"
        - left: "56%"
        - top: "2px"
      amount:
        - position: "absolute"
        - left: "56%"
        - top: "32px"

  custom_fields:
    warning:
      card:
        type: "custom:button-card"
        template:
          - "widget_count_indicator"
        variables:
          notification_counts: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.unavailable; ]]]"
        entity: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.unavailable?.entity; ]]]"

    amount:
      card:
        type: "custom:button-card"
        template:
          - "widget_count_indicator"
        variables:
          notification_counts: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.amount; ]]]"
        entity: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.amount?.entity; ]]]"

widget_count_indicator:
  show_icon: true
  show_label: false
  show_name: false
  group_expand: true
  styles:
    icon:
      - width: "14px"
      - height: "14px"
      - line-height: "0"
      - color: "rgba(var(--color-red),1)"
    img_cell:
      - border-radius: "50%"
      - background-color: "var(--card-background-color)"
      - height: "16px"
      - width: "16px"
      - border: "2px solid var(--card-background-color)"
    card:
      - height: "100%"
      - box-shadow: "none"
      - padding: "0"
      - border-radius: "50%"
  icon: >
    [[[
      var amountValue = 0;
      var icon = "mdi:numeric-0-circle"
      if (variables.notification_counts.subtype == "state") {
        amountValue = states[variables.notification_counts.entity].state
      }
      else {
        amountValue = states[variables.notification_counts.entity].attributes[variables.notification_counts.value]
      }
      if (!isNaN(amountValue) && amountValue !== undefined){
        if (amountValue > 9) {
          var amountValue = "9-plus"
        }
        icon = icon.replace("0",amountValue)
      }
      return icon;
    ]]]
  state:
    - operator: "template"
      value: >
        [[[
          var isZeroValue = true;
          var amountValue = 0;
          if (variables.notification_counts.subtype == "state") {
            amountValue = states[variables.notification_counts.entity].state;
          }
          else {
            amountValue = states[variables.notification_counts.entity].attributes[variables.notification_counts.value];
          }
          if (!isNaN(amountValue) && amountValue != 0 && amountValue !== undefined) {
            isZeroValue = false;
          }
          return isZeroValue;
        ]]]
      styles:
        card:
          - display: "none"

custom_popup_auto_entities_list:
  tap_action:
    action: >
      [[[
        var action = "fire-dom-event";
        switch(variables.ulm_card_kepath_binary_sensor_count_popup.type) {
          case "navigate":
            action = "navigate";
            break;
          default:
            return action;
        }
        return action;
      ]]]
    navigation_path: "[[[ return variables.ulm_card_kepath_binary_sensor_count_popup.type == 'navigate' ? variables.ulm_card_kepath_binary_sensor_count_popup.page : '/0' ]]]"
    browser_mod:
      service: "browser_mod.popup"
      data:
        title: "[[[return variables.ulm_card_kepath_binary_sensor_count_popup.type + ' entities']]]"
        style:
          $: >
            [[[
              if (hass.themes.theme.includes("desktop")){
                var dialog = `
                  .mdc-dialog__surface{
                    border-radius: var(--border-radius) !important;
                  }
                `;
              } else{
                var dialog = "";
              }
              return `
                *{
                  --secondary-background-color: none !important;
                }
                ${dialog}
              `;
            ]]]
          hui-vertical-stack-card:
            $: >
              div.main-title::first-letter {
                text-transform:capitalize;
              }
              button-card {
                align-self: center;
                padding: 0.2em 0 2.3em 0;
              }
              hui-entities-card{
                padding: 0.8em 1.4em;
              }
            $hui-entities-card$: >
              ha-card{
                box-shadow: none;
              }
            $hui-history-graph-card$: >
              .content {
                padding: 0 2.4em !important;
              }
              ha-card{
                box-shadow: none;
              }
            $hui-glance-card$: >
              ha-card{
                box-shadow: none;
              }
            $hui-map-card:
              $: >
                ha-icon-button {
                  color: rgba(var(--color-blue),1);
                }
              $ha-map:
                $: >
                  .leaflet-control-attribution {
                    display: none;
                  }
                  .leaflet-touch .leaflet-control-layers, .leaflet-touch .leaflet-bar {
                    border: 2px solid rgba(var(--color-blue),0.4) !important;
                  }
                  .leaflet-bar a {
                    background-color: rgba(var(--color-blue),0.2) !important;
                    color: rgba(var(--color-blue),1) !important;
                  }
                  .leaflet-bar a:first-child {
                    border-bottom: 2px solid rgba(var(--color-blue),0.4) !important;
                  }
                  .leaflet-pane.leaflet-tile-pane {
                    filter: contrast(95%);
                  }
        content:
          type: "vertical-stack"
          cards:
            - type: "custom:auto-entities"
              card:
                type: "entities"
              filter:
                include:
                  - group: "[[[ return entity.entity_id ]]]"
              sort:
                method: "[[[ return variables.auto_entities_sort_method ]]]"
                reverse: >
                  [[[
                    var sortReversed = true;
                    if (variables.auto_entities_sort_reversed == true) {
                      sortReversed = false;
                    }
                    return sortReversed;
                  ]]]
  hold_action:
    action: "more-info"
