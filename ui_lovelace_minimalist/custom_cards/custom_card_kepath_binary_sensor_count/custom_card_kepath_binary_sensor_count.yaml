---
custom_card_kepath_binary_sensor_count:
  template:
    - "icon_info_bg"
    - "ulm_translation_engine"
    - "custom_popup_auto_entities_list"
  variables:
    ulm_card_kepath_binary_sensor_count_notifications:
      unavailable:
        entity: "sensor.binary_sensor_state_counts"
        is_attribute: >
          [[[
            var isValueAttribute = true;
            if (variables?.ulm_card_kepath_binary_sensor_count_notifications?.unavailable?.is_attribute) {
              if (typeof variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.is_attribute === "boolean") {
                isValueAttribute = variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.is_attribute;
              }
            }
            return isValueAttribute;
          ]]]
        attribute_name: "zero_value"
      amount:
        entity: "sensor.binary_sensor_state_counts"
        is_attribute: >
          [[[
            var isValueAttribute = true;
            if (variables?.ulm_card_kepath_binary_sensor_count_notifications?.amount?.is_attribute) {
              if (typeof variables.ulm_card_kepath_binary_sensor_count_notifications.amount.is_attribute === "boolean") {
                isValueAttribute = variables.ulm_card_kepath_binary_sensor_count_notifications.amount.is_attribute;
              }
            }
            return isValueAttribute;
          ]]]
        attribute_name: "zero_value"
    ulm_card_kepath_binary_sensor_count_tap_action:
      action: >
        [[[
          var tapAction = "navigate";
          const tap_actions = ['navigate', 'popup'];
          if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.action) {
            for (let i = 0; i < tap_actions.length; i++) {
              if (tap_actions[i] == variables.ulm_card_kepath_binary_sensor_count_tap_action.action) {
                tapAction = tap_actions[i];
              }
            }
          }
          return tapAction;
        ]]]
      navigate:
        page: "/0"
      popup:
        title: "entity group"
        auto_entities:
          sort_method: >
            [[[
              var autoEntitiesSortMethod = "state";
              const sort_methods = ['domain', 'entity_id', 'name', 'device', 'area', 'state', 'last_changed', 'last_updated', 'last_triggered'];
              if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.sort_method) {
                for (let i = 0; i < sort_methods.length; i++) {
                  if (sort_methods[i] == variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_method) {
                    autoEntitiesSortMethod = sort_methods[i];
                  }
                }
              }
              return autoEntitiesSortMethod;
            ]]]
          sort_reversed: >
            [[[
              var autoEntitiesSortReversed = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.sort_reversed) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_reversed === "boolean") {
                  autoEntitiesSortReversed = variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_reversed;
                }
              }
              return autoEntitiesSortReversed;
            ]]]
          tap_action:
            action: >
              [[[
                var tapAction = "toggle";
                const tap_actions = ['more-info', 'toggle', 'call-service', 'none', 'navigate', 'url'];
                if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.tap_action?.action) {
                  for (let i = 0; i < tap_actions.length; i++) {
                    if (tap_actions[i] == variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.tap_action.action) {
                      tapAction = tap_actions[i];
                    }
                  }
                }
                return tapAction;
              ]]]
            target: >
              [[[
                var tapActionTarget = "none";
                if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.tap_action?.target) {
                  tapActionTarget = variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.tap_action.target;
                }
                return tapActionTarget;
              ]]]
  icon: "mdi:lightbulb"
  show_icon: true
  show_label: false
  show_name: true
  group_expand: true
  triggers_update: "all"
  styles:
    grid:
      - grid-template-areas: "'i' 'n'"
      - grid-template-rows: "1fr min-content"
      - grid-template-columns: "1fr"
      - justify-items: "center"
    icon:
      - width: "20px"
    card:
      - box-shadow: "none"
      - border-radius: "none"
      - padding: "5px"
    name:
      - place-self: "center"
      - font-weight: "bold"
      - font-size: "10px"
      - text-overflow: "ellipsis"
      - overflow: "hidden"
      - padding-top: "10px"
      - margin: "0"
      - min-width: "20px"
      - color: "var(--primary-text-color)"
    custom_fields:
      unavailable:
        - position: "absolute"
        - left: "56%"
        - top: "2px"
      amount:
        - position: "absolute"
        - left: "56%"
        - top: "32px"

  custom_fields:
    unavailable:
      card:
        type: "custom:button-card"
        template:
          - "widget_count_indicator"
        variables:
          notification_counts: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.unavailable; ]]]"
        entity: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.unavailable?.entity; ]]]"

    amount:
      card:
        type: "custom:button-card"
        template:
          - "widget_count_indicator"
        variables:
          notification_counts: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.amount; ]]]"
        entity: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.amount?.entity; ]]]"

widget_count_indicator:
  show_icon: true
  show_label: false
  show_name: false
  group_expand: true
  styles:
    icon:
      - width: "14px"
      - height: "14px"
      - line-height: "0"
      - color: "rgba(var(--color-red),1)"
    img_cell:
      - border-radius: "50%"
      - background-color: "var(--card-background-color)"
      - height: "16px"
      - width: "16px"
      - border: "2px solid var(--card-background-color)"
    card:
      - height: "100%"
      - box-shadow: "none"
      - padding: "0"
      - border-radius: "50%"
  icon: >
    [[[
      var amountValue = 0;
      var icon = "mdi:numeric-0-circle";
      if (variables.notification_counts.is_attribute) {
        amountValue = states[variables?.notification_counts?.entity]?.attributes[variables?.notification_counts?.attribute_name] ? states[variables.notification_counts.entity].attributes[variables.notification_counts.attribute_name] : 0;
      } else {
        amountValue = states[variables?.notification_counts?.entity]?.state ? states[variables.notification_counts.entity].state : 0;
      }
      if (!isNaN(amountValue) && amountValue !== undefined){
        if (amountValue > 9) {
          var amountValue = "9-plus";
        }
        icon = icon.replace("0",amountValue);
      }
      return icon;
    ]]]
  state:
    - operator: "template"
      value: >
        [[[
          var isZeroValue = true;
          var amountValue = 0;
          if (variables.notification_counts.is_attribute) {
            amountValue = states[variables?.notification_counts?.entity]?.attributes[variables?.notification_counts?.attribute_name] ? states[variables.notification_counts.entity].attributes[variables.notification_counts.attribute_name] : 0;
          } else {
            amountValue = states[variables?.notification_counts?.entity]?.state ? states[variables.notification_counts.entity].state : 0;
          }
          if (!isNaN(amountValue) && amountValue != 0 && amountValue !== undefined) {
            isZeroValue = false;
          }
          return isZeroValue;
        ]]]
      styles:
        card:
          - display: "none"
  tap_action:
    action: "none"

custom_popup_auto_entities_list:
  tap_action:
    action: >
      [[[
        var action = "fire-dom-event";
        switch(variables.ulm_card_kepath_binary_sensor_count_tap_action.action) {
          case "navigate":
            action = "navigate";
            break;
          default:
            break;
        }
        return action;
      ]]]
    navigation_path: "[[[ return variables.ulm_card_kepath_binary_sensor_count_tap_action.action == 'navigate' ? variables.ulm_card_kepath_binary_sensor_count_tap_action.navigate.page : '/0' ]]]"
    browser_mod:
      service: "browser_mod.popup"
      data:
        title: "[[[return variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.title]]]"
        style:
          $: >
            [[[
              if (hass.themes.theme.includes("desktop")){
                var dialog = `
                  .mdc-dialog__surface{
                    border-radius: var(--border-radius) !important;
                  }
                `;
              } else{
                var dialog = "";
              }
              return `
                *{
                  --secondary-background-color: none !important;
                }
                ${dialog}
              `;
            ]]]
          hui-vertical-stack-card:
            $: >
              div.main-title::first-letter {
                text-transform:capitalize;
              }
              button-card {
                align-self: center;
                padding: 0.2em 0 2.3em 0;
              }
              hui-entities-card{
                padding: 0.8em 1.4em;
              }
            $hui-entities-card$: >
              ha-card{
                box-shadow: none;
              }
            $hui-history-graph-card$: >
              .content {
                padding: 0 2.4em !important;
              }
              ha-card{
                box-shadow: none;
              }
            $hui-glance-card$: >
              ha-card{
                box-shadow: none;
              }
            $hui-map-card:
              $: >
                ha-icon-button {
                  color: rgba(var(--color-blue),1);
                }
              $ha-map:
                $: >
                  .leaflet-control-attribution {
                    display: none;
                  }
                  .leaflet-touch .leaflet-control-layers, .leaflet-touch .leaflet-bar {
                    border: 2px solid rgba(var(--color-blue),0.4) !important;
                  }
                  .leaflet-bar a {
                    background-color: rgba(var(--color-blue),0.2) !important;
                    color: rgba(var(--color-blue),1) !important;
                  }
                  .leaflet-bar a:first-child {
                    border-bottom: 2px solid rgba(var(--color-blue),0.4) !important;
                  }
                  .leaflet-pane.leaflet-tile-pane {
                    filter: contrast(95%);
                  }
        content:
          type: "vertical-stack"
          cards:
            - type: "custom:auto-entities"
              card:
                type: "vertical-stack"
              card_param: "cards"
                # type: "entities"
                # show_header_toggle: false
                # state_color: true
              filter:
                include:
                  - group: "[[[ return entity.entity_id ]]]"
                    options:
                      type: "custom:button-card"
                      entity: "this.entity_id"
                      template: >
                        [[[
                          var entityTemplate = ["card_binary_sensor", "icon_info_bg", "ulm_translation_engine"];
                          if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.entity_templates) {
                            entityTemplate = variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.entity_templates;
                          }
                          return entityTemplate;
                        ]]]
                      # secondary_info: "last-changed"
                      # # entity_id: "this.entity_id"
                      # tap_action:
                      #   action: "fire-dom-event"
                      #   browser_mod:
                      #     service: "browser_mod.sequence"
                      #     data:
                      #       sequence:
                      #         - service: "browser_mod.close_popup"
                      #         # - service: "browser_mod.javascript"
                      #         #   data:
                      #         #     code: |
                      #         #       let entityId = "this.entity_id";
                      #         #       //alert(entityId);
                      #         #       //alert(hass.states[entityId].state);
                      #         #       //alert(variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.target);
                      #         # - service: "browser_mod.more-info"
                      #         #   data:
                      #         #     entity: "this.entity_id"
                      #         - service: "browser_mod.navigate"
                      #           data:
                      #             # entity: "this.entity_id"
                      #             path: >
                      #               [[[
                      #                 let entityId = "this.entity_id";
                      #                 //var entityId = "this.entity_id";

                      #                 //var newentityId = states["binary_sensor.udmpro_disk_0_health"].entity_id;
                      #                 //var newentityId = states[entityId].entity_id;
                      #                 //var newentityId = states[entityId]?.entity_id ? states[entityId].entity_id : "missing10";
                      #                 //var navigationPath = "/0";
                      #                 //var deviceId = hass.entities[entityId].device_id;
                      #                 //if (variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.target == "device_id") {
                      #                 //  if (hass?.entities[entityId]?.device_id;) {
                      #                 //    navigationPath = "config/devices/device/" + hass.entities[entityId].device_id;
                      #                 //  } else {
                      #                 //    navigationPath = "config/devices/dashboard";
                      #                 //  }
                      #                 //}
                      #                 //return "config/devices/device/" + deviceId;
                      #                 //return typeof(entityId)
                      #                 //return entityId;
                      #                 //return newentityId;
                      #                 return "entity_id: " + entityId;
                      #                 //return hass.entities[].device_id
                      #                 //return "this";
                      #                 //return "this.entity_id";
                      #               ]]]
                      # # tap_action:
                      # #   action: >
                      # #     [[[
                      # #       var action = "more-info";
                      # #       switch(variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.action) {
                      # #         case "navigate":
                      # #           action = "navigate";
                      # #           break;
                      # #         case "call-service":
                      # #           action = "call-service";
                      # #           break;
                      # #         case "fire-dom-event":
                      # #           action = "fire-dom-event";
                      # #           break;
                      # #         default:
                      # #           break;
                      # #       }
                      # #       return action;
                      # #     ]]]
                      # #   navigation_path: >
                      # #     [[[
                      # #       var navigationPath = "/0";
                      # #       if (variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.target == "device_id") {
                      # #         if (hass?.entities[this.entity_id]?.device_id;) {
                      # #           navigationPath = "config/devices/device/" + hass.entities[this.entity_id].device_id;
                      # #         } else {
                      # #           navigationPath = "config/devices/dashboard";
                      # #         }
                      # #       }
                      # #       return navigationPath;
                      # #     ]]]
                      # # hold_action:
                      # #   action: "more-info"
                      # # double_tap_action:
                      # #   action: "more-info"
              sort:
                method: "[[[ return variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_method ]]]"
                reverse: >
                  [[[
                    var sortReversed = true;
                    if (variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_reversed == true) {
                      sortReversed = false;
                    }
                    return sortReversed;
                  ]]]
  hold_action:
    action: "more-info"
