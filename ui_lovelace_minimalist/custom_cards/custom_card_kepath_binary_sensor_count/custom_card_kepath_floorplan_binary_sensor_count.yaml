---
custom_card_kepath_floorplan_binary_sensor_count:
  template:
    - "icon_info_bg"
    - "ulm_translation_engine"
    # - "custom_popup_auto_entities_list"
  variables:
    ulm_card_kepath_binary_sensor_count_notifications:
      unavailable:
        entity: "sensor.binary_sensor_state_counts"
        is_attribute: >
          [[[
            var isValueAttribute = true;
            if (variables?.ulm_card_kepath_binary_sensor_count_notifications?.unavailable?.is_attribute) {
              if (typeof variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.is_attribute === "boolean") {
                isValueAttribute = variables.ulm_card_kepath_binary_sensor_count_notifications.unavailable.is_attribute;
              }
            }
            return isValueAttribute;
          ]]]
        attribute_name: "zero_value"
        count_tooltip: ""
      amount:
        entity: "sensor.binary_sensor_state_counts"
        is_attribute: >
          [[[
            var isValueAttribute = true;
            if (variables?.ulm_card_kepath_binary_sensor_count_notifications?.amount?.is_attribute) {
              if (typeof variables.ulm_card_kepath_binary_sensor_count_notifications.amount.is_attribute === "boolean") {
                isValueAttribute = variables.ulm_card_kepath_binary_sensor_count_notifications.amount.is_attribute;
              }
            }
            return isValueAttribute;
          ]]]
        attribute_name: "zero_value"
        count_tooltip: ""
    ulm_card_kepath_binary_sensor_count_tap_action:
      action: >
        [[[
          var tapAction = "navigate";
          const tap_actions = ['navigate', 'popup', 'more_info'];
          if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.action) {
            for (let i = 0; i < tap_actions.length; i++) {
              if (tap_actions[i] == variables.ulm_card_kepath_binary_sensor_count_tap_action.action) {
                tapAction = tap_actions[i];
              }
            }
          }
          return tapAction;
        ]]]
      navigate:
        page: "/0"
      popup:
        title: "entity group"
        auto_entities:
          sort_method: >
            [[[
              var autoEntitiesSortMethod = "state";
              const sort_methods = ['domain', 'entity_id', 'name', 'device', 'area', 'state', 'last_changed', 'last_updated', 'last_triggered'];
              if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.sort_method) {
                for (let i = 0; i < sort_methods.length; i++) {
                  if (sort_methods[i] == variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_method) {
                    autoEntitiesSortMethod = sort_methods[i];
                  }
                }
              }
              return autoEntitiesSortMethod;
            ]]]
          sort_reversed: >
            [[[
              var autoEntitiesSortReversed = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.sort_reversed) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_reversed === "boolean") {
                  autoEntitiesSortReversed = variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_reversed;
                }
              }
              return autoEntitiesSortReversed;
            ]]]
          sort_numeric: >
            [[[
              var autoEntitiesSortNumeric = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.sort_method) {
                if (variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_method == "last_changed" ||
                    variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_method == "last_updated" ||
                    variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_method == "last_triggered") {
                  autoEntitiesSortNumeric = true;
                }
              }
              if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.sort_numeric) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_numeric === "boolean") {
                  autoEntitiesSortNumeric = variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_numeric;
                }
              }
              return autoEntitiesSortNumeric;
            ]]]
          exclude_unknown_state: >
            [[[
              var autoEntitiesExcludeUnknownState = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.exclude_unknown_state) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.exclude_unknown_state === "boolean") {
                  autoEntitiesExcludeUnknownState = variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.exclude_unknown_state;
                }
              }
              return autoEntitiesExcludeUnknownState;
            ]]]
          exclude_unavailable_state: >
            [[[
              var autoEntitiesExcludeUnavailableState = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_tap_action?.popup?.auto_entities?.exclude_unavailable_state) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.exclude_unavailable_state === "boolean") {
                  autoEntitiesExcludeUnavailableState = variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.exclude_unavailable_state;
                }
              }
              return autoEntitiesExcludeUnavailableState;
            ]]]
    ulm_card_kepath_binary_sensor_count_amount_tap_action:
      action: >
        [[[
          var tapAction = "none";
          const tap_actions = ['none', 'navigate', 'popup', 'more_info'];
          if (variables?.ulm_card_kepath_binary_sensor_count_amount_tap_action?.action) {
            for (let i = 0; i < tap_actions.length; i++) {
              if (tap_actions[i] == variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.action) {
                tapAction = tap_actions[i];
              }
            }
          }
          return tapAction;
        ]]]
      navigate:
        page: "/0"
      popup:
        title: "entity group"
        auto_entities:
          sort_method: >
            [[[
              var autoEntitiesSortMethod = "state";
              const sort_methods = ['domain', 'entity_id', 'name', 'device', 'area', 'state', 'last_changed', 'last_updated', 'last_triggered'];
              if (variables?.ulm_card_kepath_binary_sensor_count_amount_tap_action?.popup?.auto_entities?.sort_method) {
                for (let i = 0; i < sort_methods.length; i++) {
                  if (sort_methods[i] == variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_method) {
                    autoEntitiesSortMethod = sort_methods[i];
                  }
                }
              }
              return autoEntitiesSortMethod;
            ]]]
          sort_reversed: >
            [[[
              var autoEntitiesSortReversed = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_amount_tap_action?.popup?.auto_entities?.sort_reversed) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_reversed === "boolean") {
                  autoEntitiesSortReversed = variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_reversed;
                }
              }
              return autoEntitiesSortReversed;
            ]]]
          sort_numeric: >
            [[[
              var autoEntitiesSortNumeric = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_amount_tap_action?.popup?.auto_entities?.sort_method) {
                if (variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_method == "last_changed" ||
                    variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_method == "last_updated" ||
                    variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_method == "last_triggered") {
                  autoEntitiesSortNumeric = true;
                }
              }
              if (variables?.ulm_card_kepath_binary_sensor_count_amount_tap_action?.popup?.auto_entities?.sort_numeric) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_numeric === "boolean") {
                  autoEntitiesSortNumeric = variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_numeric;
                }
              }
              return autoEntitiesSortNumeric;
            ]]]
          exclude_unknown_state: >
            [[[
              var autoEntitiesExcludeUnknownState = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_amount_tap_action?.popup?.auto_entities?.exclude_unknown_state) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.exclude_unknown_state === "boolean") {
                  autoEntitiesExcludeUnknownState = variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.exclude_unknown_state;
                }
              }
              return autoEntitiesExcludeUnknownState;
            ]]]
          exclude_unavailable_state: >
            [[[
              var autoEntitiesExcludeUnavailableState = false;
              if (variables?.ulm_card_kepath_binary_sensor_count_amount_tap_action?.popup?.auto_entities?.exclude_unavailable_state) {
                if (typeof variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.exclude_unavailable_state === "boolean") {
                  autoEntitiesExcludeUnavailableState = variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.exclude_unavailable_state;
                }
              }
              return autoEntitiesExcludeUnavailableState;
            ]]]

  show_icon: false
  show_label: false
  show_name: false
  group_expand: true
  triggers_update: "all"
  styles:
    grid:
      - grid-template-rows: "1fr"
      - grid-template-columns: "1fr"
      - justify-items: "center"
    card:
      - box-shadow: "none"
      - border-radius: "none"
      - background-color: "rgba(var(--color-theme),0)"
      - overflow: "visible"
      - transform: "none"
    custom_fields:
      unavailable:
        - position: "absolute"
        - left: "10px"
        - top: "10px"
      amount:
        - position: "absolute"
        - left: "130px"
        - top: "10px"
      notification:
        - visibility: "hidden"

  custom_fields:
    unavailable:
      card:
        type: "custom:button-card"
        template:
          - "widget_count_indicator"
          - "custom_popup_auto_entities_list"
        variables:
          notification_counts: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.unavailable; ]]]"
          ulm_card_kepath_binary_sensor_count_tap_action:
            action: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.action; ]]]"
            navigate:
              page: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.navigate.page; ]]]"
            popup:
              title: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.title; ]]]"
              auto_entities:
                sort_method: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_method; ]]]"
                sort_reversed: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_reversed; ]]]"
                sort_numeric: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_numeric; ]]]"
                exclude_unknown_state: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.exclude_unknown_state; ]]]"
                exclude_unavailable_state: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.exclude_unavailable_state; ]]]"
        entity: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.unavailable?.entity; ]]]"

    amount:
      card:
        type: "custom:button-card"
        template:
          - "widget_count_indicator"
          - "custom_popup_auto_entities_list"
        variables:
          notification_counts: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.amount; ]]]"
          ulm_card_kepath_binary_sensor_count_tap_action:
            action: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.action; ]]]"
            navigate:
              page: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.navigate.page; ]]]"
            popup:
              title: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.title; ]]]"
              auto_entities:
                sort_method: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_method; ]]]"
                sort_reversed: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_reversed; ]]]"
                sort_numeric: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.sort_numeric; ]]]"
                exclude_unknown_state: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.exclude_unknown_state; ]]]"
                exclude_unavailable_state: "[[[ return variables.ulm_card_kepath_binary_sensor_count_amount_tap_action.popup.auto_entities.exclude_unavailable_state; ]]]"
        entity: "[[[ return variables?.ulm_card_kepath_binary_sensor_count_notifications?.amount?.entity; ]]]"

widget_count_indicator:
  show_icon: true
  show_label: false
  show_name: false
  group_expand: true
  styles:
    icon:
      - width: "14px"
      - height: "14px"
      - line-height: "0"
      - color: >
          [[[
            var iconColor = "rgba(var(--color-red),1)";
            if(hass.themes.darkMode) {
              iconColor = "rgba(var(--color-yellow),1)";
            }
            return iconColor;
          ]]]
    img_cell:
      - border-radius: "50%"
      - background-color: "rgba(var(--color-theme),0)"
      - height: "16px"
      - width: "16px"
      - border: "2px solid rgba(var(--color-theme),0)"
    card:
      - height: "100%"
      - box-shadow: "none"
      - padding: "0"
      - border-radius: "50%"
  style:
    $: >
      .tooltip .tooltiptext {
        display:none;
      }

  icon: >
    [[[
      var amountValue = 0;
      var icon = "mdi:numeric-0-circle";
      if (variables.notification_counts.is_attribute) {
        amountValue = states[variables?.notification_counts?.entity]?.attributes[variables?.notification_counts?.attribute_name] ? states[variables.notification_counts.entity].attributes[variables.notification_counts.attribute_name] : 0;
      } else {
        amountValue = states[variables?.notification_counts?.entity]?.state ? states[variables.notification_counts.entity].state : 0;
      }
      if (!isNaN(amountValue) && amountValue !== undefined){
        if (amountValue > 9) {
          amountValue = "9-plus";
        }
        icon = icon.replace("0",amountValue);
      }
      if (amountValue == "on") {
        icon = "mdi:arrow-up-bold-circle";
      }
      if(hass.themes.darkMode) {
        icon = icon.replace("-circle","");
      }
      return icon;
    ]]]
  state:
    - operator: "template"
      value: >
        [[[
          var isZeroValue = true;
          var amountValue = 0;
          if (variables.notification_counts.is_attribute) {
            amountValue = states[variables?.notification_counts?.entity]?.attributes[variables?.notification_counts?.attribute_name] ? states[variables.notification_counts.entity].attributes[variables.notification_counts.attribute_name] : 0;
          } else {
            amountValue = states[variables?.notification_counts?.entity]?.state ? states[variables.notification_counts.entity].state : 0;
          }
          if (!isNaN(amountValue) && amountValue != 0 && amountValue !== undefined) {
            isZeroValue = false;
          }
          if (amountValue == "on") {
            isZeroValue = false;
          }
          return isZeroValue;
        ]]]
      styles:
        card:
          - display: "none"
  tooltip: >
    [[[
      var tooltipValue = null;
      if(variables?.notification_counts?.count_tooltip) {
        tooltipValue = variables.notification_counts.count_tooltip;
      }
      return tooltipValue;
    ]]]

custom_popup_auto_entities_list:
  tap_action:
    action: "fire-dom-event"
    browser_mod:
      service: >
        [[[
          var service = "";
          switch(variables.ulm_card_kepath_binary_sensor_count_tap_action.action) {
            case "navigate":
              service = "browser_mod.navigate";
              break;
            case "more_info":
              service = "browser_mod.more_info";
              break;
            default:
              service = "browser_mod.popup";
              break;
          }
          return service;
        ]]]
      data:
        path: "[[[ return variables.ulm_card_kepath_binary_sensor_count_tap_action.action == 'navigate' ? variables.ulm_card_kepath_binary_sensor_count_tap_action.navigate.page : '/0' ]]]"
        title: "[[[return variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.title]]]"
        # dismissable: false
        autoclose: false
        style:
          $: >
            [[[
              if (hass.themes.theme.includes("desktop")){
                var dialog = `
                  .mdc-dialog__surface{
                    border-radius: var(--border-radius) !important;
                  }
                `;
              } else{
                var dialog = "";
              }
              return `
                *{
                  --secondary-background-color: none !important;
                }
                ${dialog}
              `;
            ]]]
          hui-vertical-stack-card:
            $: >
              div.main-title::first-letter {
                text-transform:capitalize;
              }
              button-card {
                align-self: center;
                padding: 0.2em 0 2.3em 0;
              }
              hui-entities-card{
                padding: 0.8em 1.4em;
              }
            $hui-entities-card$: >
              ha-card{
                box-shadow: none;
              }
        content:
          type: "vertical-stack"
          cards:
            - type: "custom:auto-entities"
              card:
                type: "entities"
                show_header_toggle: false
                state_color: true
              filter:
                include:
                  - group: "[[[ return entity.entity_id ]]]"
                exclude:
                  - state: >
                      [[[
                        var excludedState = "notavalidstate";
                        if (variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.exclude_unknown_state == true) {
                          excludedState = "unknown";
                        }
                        return excludedState;
                      ]]]
                  - state: >
                      [[[
                        var excludedState = "notavalidstate";
                        if (variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.exclude_unavailable_state == true) {
                          excludedState = "unavailable";
                        }
                        return excludedState;
                      ]]]
              sort:
                method: "[[[ return variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_method ]]]"
                numeric: "[[[ return variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_numeric ]]]"
                reverse: >
                  [[[
                    var sortReversed = true;
                    if (variables.ulm_card_kepath_binary_sensor_count_tap_action.popup.auto_entities.sort_reversed == true) {
                      sortReversed = false;
                    }
                    return sortReversed;
                  ]]]
  hold_action:
    action: "more-info"
