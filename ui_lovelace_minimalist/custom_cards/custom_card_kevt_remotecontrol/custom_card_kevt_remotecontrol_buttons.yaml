
########################################################
#####  BUTTON TEMPLATES                             ####
########################################################

remotecontrol_button:
  type: 'custom:button-card'
  template: 
    - layout_button
  variables:
    button:
  card:
    type: 'custom:button-card'
    template:
      - remotecontrol_button_presses
    variables:
      entity_id:
      button_actions:
        tap:
          entity_id: >
            [[[
              if (variables.button.actions.tap.entity_id == null) {
                return variables.button.entity_id;
              } else {
                return variables.button.actions.tap.entity_id;
              }
            ]]]
          action: '[[[ return variables.button.actions.tap.action ]]]'
          service: '[[[ return variables.button.actions.tap.service ]]]'
          haptic: '[[[ return variables.button.actions.tap.haptic ]]]'
        double_tap:
          entity_id: >
            [[[
              if (variables.button.actions.double_tap.entity_id == null) {
                return variables.button.entity_id;
              } else {
                return variables.button.actions.double_tap.entity_id;
              }
            ]]]
          action: '[[[ return variables.button.actions.double_tap.action ]]]'
          service: '[[[ return variables.button.actions.double_tap.service ]]]'
          haptic: '[[[ return variables.button.actions.double_tap.haptic ]]]'
        hold:
          entity_id: >
            [[[
              if (variables.button.actions.hold.entity_id == null) {
                return variables.button.entity_id;
              } else {
                return variables.button.actions.hold.entity_id;
              }
            ]]]
          action: '[[[ return variables.button.actions.hold.action ]]]'
          service: '[[[ return variables.button.actions.hold.service ]]]'
          haptic: '[[[ return variables.button.actions.hold.haptic ]]]'
          repeat: '[[[ return variables.button.actions.hold.repeat ]]]'
  icon: >
    [[[
      var icon = variables.button.icon.name;
      if (variables.button.class == 'play') {
        if (states[variables.button.entity_id].state == 'off'
            || states[variables.button.entity_id].state == 'PowerOff'
            || states[variables.button.entity_id].state == 'idle'
            || states[variables.button.entity_id].state == 'paused') {
          var icon = 'mdi:play';
        }
      }
      return icon;
    ]]]
  styles:
    icon:
      - color: '[[[ return variables.button.icon.color ]]]'
      - width: > 
          [[[
            var size = '70%';
            if (variables.button.icon.size != null) {
              size = variables.button.icon.size;
            }
            return size;
          ]]] 
      - height: > 
          [[[
            var size = '70%';
            if (variables.button.icon.size != null) {
              size = variables.button.icon.size;
            }
            return size;
          ]]]
    img_cell:
      - background-color: >
          [[[
              var color = variables.button.background_color;
              if (variables.button.class == 'mute') {
                if (typeof states[variables.button.entity_id].attributes.is_volume_muted !== 'undefined') {
                  if (states[variables.button.entity_id].attributes.is_volume_muted){
                    var color = "rgba(var(--color-green), 0.2)";
                  }
                }
              }
              return color;
          ]]]
  color: "var(--google-grey)"
              # if (variables.button.class == 'power') {
              #   if (states[variables.button.entity_id].state == 'off'
              #       || states[variables.button.entity_id].state == 'PowerOff') {
              #     var color = "var(--google-grey)";
              #   }
              # }

remotecontrol_button_presses:
  type: 'custom:button-card'
  template: layout_button
  variables:
    button_actions:
  tap_action:
    card:
      type: 'custom:button-card'
      template: remotecontrol_button_action
      variables:
        button_action: '[[[ return variables.button_actions.tap ]]]'
  double_tap_action:
    card:
      type: 'custom:button-card'
      template: remotecontrol_button_action
      variables:
        button_action: '[[[ return variables.button_actions.double_tap]]]'
  hold_action:
    card:
      type: 'custom:button-card'
      template: remotecontrol_button_action
      variables:
        button_action: '[[[ return variables.button_actions.hold ]]]'

remotecontrol_button_action:
  type: 'custom:button-card'
  template: layout_button
  variables:
    button_action:
  action: >
    {% if variables.button_action.action == "call-service" %}
      {% if variables.button_action.service.startswith("androidtv") %}
        action: call-service
        service: androidtv.adb_command
        service_data:
          command: '[[[ return variables.button_action.command ]]]'
          entity_id: '[[[ return variables.button_action.entity_id ]]]'
      {% elif variables.button_action.service.startswith("media") %}
        service: media_player.play_media
        data:
          entity_id: '[[[ return variables.button_action.entity_id ]]]'
          media_content_id: '[[[ return variables.button_action.command ]]]'
          media_content_type: "send_key"
      {% elif variables.button_action.service.startswith("remote") %}
        service: remote.send_command
        target:
          entity_id: '[[[ return variables.button_action.entity_id ]]]'
        data:
          command:
            - '[[[ return variables.button_action.command ]]]'
          device: '[[[ return variables.button_action.harmony.device ]]]'
          delay_secs: '[[[ return variables.button_action.harmony.delay ]]]'
      {% else %}
        "none"
      {% endif%}
    {% elif variables.button_action.action == "more-info" %}
      action: more-info
      entity_id: '[[[ return variables.button_action.entity_id ]]]'
    {% elif variables.button_action.action == "toggle" %}
      action: toggle
    {% elif variables.button_action.action == "navigate" %}
      action: navigate
      navigation_path: '[[[ return variables.button_action.command ]]]'
    {% elif variables.button_action.action == "url" %}
    {% else %}
      "none"
    {% endif %}
    haptic: '[[[ return variables.button_action.haptic ]]]'


##  success	Indicates that a task or action has completed.
##  warning	Indicates that a task or action has produced a warning of some kind.
##  failure	Indicates that a task or action has failed.
##  light	Provides a physical metaphor that complements the visual experience.
##  medium	Provides a physical metaphor that complements the visual experience.
##  heavy	Provides a physical metaphor that complements the visual experience.
##  selection	Indicates that the selection is actively changing.
