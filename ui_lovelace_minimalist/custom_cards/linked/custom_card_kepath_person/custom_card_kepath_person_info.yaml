---
custom_card_kepath_person_info:
  template:
    - "icon_info_bg"
    - "ulm_translation_engine"
    - "ulm_custom_card_kepath_person_language_variables"
    - "custom_popup_kepath_person"
    - "ulm_gradient_green_to_red_5step"
  variables:
    ulm_card_kepath_person_entity: ""
    ulm_card_kepath_person_wifi_tracker: ""
    ulm_card_kepath_person_gps_tracker: ""
    ulm_card_kepath_person_battery_entity: ""
    ulm_card_kepath_person_driving_entity: ""
    ulm_card_kepath_person_distance_entity: ""
  triggers_update: "all"
  show_label: false
  show_name: true
  group_expand: true
  label: ""
  name: "[[[ return states[variables?.ulm_card_kepath_person_entity]?.attributes?.friendly_name ]]]"
  entity: "[[[ return variables?.ulm_card_kepath_person_entity; ]]]"
  icon: >
    [[[
      var icon = "mdi:map-marker";
      var personLocation = "unknown";
      var zoneList = []

      if (typeof variables?.ulm_card_kepath_person_entity !== 'undefined') {
        if (typeof states[variables?.ulm_card_kepath_person_entity]?.state !== 'undefined') {
          personLocation = states[variables.ulm_card_kepath_person_entity].state
          personLocation = personLocation.replaceAll(" ", "").replaceAll("'", "").replaceAll("_", "").toLowerCase();
        }
      }

      if (typeof states['sensor.integration_entity_attributes']?.attributes?.remapped_zone_list !== 'undefined') {
        zoneList = states['sensor.integration_entity_attributes']?.attributes?.remapped_zone_list;
      }

      switch (personLocation) {
        case "unknown":
        case "unavailable":
        case "notset":
          icon = "mdi:map-marker-alert";
          break;
        case "away":
        case "not_home":
        case "stationary":
        case "statzon1":
          icon = "mdi:map-marker-question";
          if (typeof states[variables?.ulm_card_kepath_person_driving_entity]?.state !== 'undefined') {
            if (states[variables.ulm_card_kepath_person_driving_entity].state == "on") {
              icon = "mdi:car"
            }
          }
          break;
        case "home":
          icon = "mdi:home-map-marker";
          break;
        default:
          for (const zone of zoneList) {
            if (personLocation == zone.replace("zone.","").replaceAll(" ", "").replaceAll("'", "").replaceAll("_","")) {
              if (typeof states[zone]?.attributes?.icon !== "undefined") {
                if (states[zone].attributes.icon.includes('mdi:')) {
                  icon = states[zone].attributes.icon;
                  break;
                }
              }
            } else {
              //hass.callService('system_log', 'write', {level:'warning',message:'personLocation: ' + personLocation});
              //hass.callService('system_log', 'write', {level:'warning',message:'zone.replace("zone.","").replaceAll("_",""): ' + zone.replace("zone.","").replaceAll("_","")});
              icon = "mdi:map-marker-account";
            }
          }
      }

      return icon;
    ]]]
  styles:
    card:
      - box-shadow: "none"
      - padding: "0"
    grid:
      - grid-template-areas: "'i' 'i' 'n'"
      - grid-template-rows: "min-content min-content"
      - grid-template-columns: "auto"
      - row-gap: "0px"
    icon:
      - color: "rgba(var(--color-yellow),1)"
      - width: "20px"
      - place-self: "center"
    img_cell:
      - background-color: "rgba(var(--color-yellow),0.2)"
    name:
      - place-self: "center"
      - font-weight: "bold"
      - font-size: "10px"
      - text-overflow: "ellipsis"
      - overflow: "hidden"
      - padding-top: "10px"
      - margin: "0"
    custom_fields:
      distance:
        - position: "absolute"
        - left: "57%"
        - top: "-4px"
      battery:
        - position: "absolute"
        - left: "57%"
        - top: "28px"
  state:
    - operator: "template"
      value: >
        [[[
          var personLocation = "unknown";

          if (typeof variables?.ulm_card_kepath_person_entity !== 'undefined') {
            if (typeof states[variables?.ulm_card_kepath_person_entity]?.state !== 'undefined') {
              personLocation = states[variables.ulm_card_kepath_person_entity].state.replace(" ", "").toLowerCase();
            }
          }

          if ((personLocation == 'away') || (personLocation == 'not_home') || (personLocation == 'stationary') || (personLocation == 'statzon1')) {
            return true;
          }
        ]]]
      styles:
        icon:
          - color: "rgba(var(--color-blue),1)"
        img_cell:
          - background-color: "rgba(var(--color-blue),0.2)"
    - operator: "template"
      value: >
        [[[
          var personLocation = "unknown";

          if (typeof variables?.ulm_card_kepath_person_entity !== 'undefined') {
            if (typeof states[variables?.ulm_card_kepath_person_entity]?.state !== 'undefined') {
              personLocation = states[variables.ulm_card_kepath_person_entity].state.replace(" ", "").toLowerCase();
            }
          }

          if ((personLocation == 'unknown') || (personLocation == 'unavailable') || (personLocation == 'notset')) {
            return true;
          }
        ]]]
      styles:
        icon:
          - color: "rgba(var(--color-red),1)"
        img_cell:
          - background-color: "rgba(var(--color-red),0.2)"
    - operator: "template"
      value: >
        [[[
          var personLocation = "unknown";

          if (typeof variables?.ulm_card_kepath_person_entity !== 'undefined') {
            if (typeof states[variables?.ulm_card_kepath_person_entity]?.state !== 'undefined') {
              personLocation = states[variables.ulm_card_kepath_person_entity].state.replace(" ", "").toLowerCase();
            }
          }

          if (personLocation == 'home') {
            return true;
          }
        ]]]
      styles:
        icon:
          - color: "rgba(var(--color-green),1)"
        img_cell:
          - background-color: "rgba(var(--color-green),0.2)"
  custom_fields:

    distance:
      card:
        type: "custom:button-card"
        styles:
          icon:
            - width: "14px"
            - height: "14px"
            - line-height: "0"
            - color: "rgba(var(--color-red),1)"
          img_cell:
            - border-radius: "50%"
            - height: "16px"
            - width: "16px"
            - border: "2px solid var(--card-background-color)"
            - background-color: "var(--card-background-color)"
          card:
            - height: "100%"
            - box-shadow: "none"
            - padding: "0px"
            - border-radius: "50%"
            - display: "block"
        icon: "mdi:help-circle"
        state:
          # variables not supplied
          - operator: "template"
            value: >
              [[[
                if (variables?.ulm_card_kepath_person_entity == "") {
                  return true;
                }

                if (variables?.ulm_card_kepath_person_distance_entity == "") {
                  return true;
                }

                if (typeof states[variables?.ulm_card_kepath_person_entity]?.state === 'undefined') {
                  return true;
                }

                if (typeof states[variables?.ulm_card_kepath_person_distance_entity]?.state === 'undefined') {
                  return true;
                }
              ]]]
            icon: "mdi:account-alert"
            styles:
              icon:
                - color: "rgba(var(--color-red),1)"
              img_cell:
                - background-color: "rgba(var(--color-red),0.2)"

          # location is HOME
          - operator: "template"
            value: >
              [[[
                var personLocation = "unknown";

                if (typeof variables?.ulm_card_kepath_person_entity !== 'undefined') {
                  if (typeof states[variables?.ulm_card_kepath_person_entity]?.state !== 'undefined') {
                    personLocation = states[variables.ulm_card_kepath_person_entity].state.replace(" ", "").toLowerCase();
                  }
                }

                if (personLocation == 'home') {
                  return true;
                }
              ]]]
            styles:
              card:
                - display: "none"

          # distance 0 - 10 miles
          - operator: "template"
            value: >
              [[[
                var fromHomeDistance = 0;
                if (typeof states[variables?.ulm_card_kepath_person_distance_entity]?.state !== 'undefined') {
                  fromHomeDistance = states[variables.ulm_card_kepath_person_distance_entity].state
                  if (!isNaN(fromHomeDistance)){
                    fromHomeDistance = Math.floor(fromHomeDistance);
                  }
                }
                if (fromHomeDistance < 10 && fromHomeDistance != 0) {
                  return true;
                }
              ]]]
            icon: >
              [[[
                var fromHomeDistance = 0;
                var icon = "mdi:numeric-0-circle";
                if (typeof states[variables?.ulm_card_kepath_person_distance_entity]?.state !== 'undefined') {
                  fromHomeDistance = states[variables.ulm_card_kepath_person_distance_entity].state
                  if (!isNaN(fromHomeDistance)){
                    fromHomeDistance = Math.floor(fromHomeDistance);
                    icon = icon.replace("0",fromHomeDistance);
                  }
                }
                //if(hass.themes.darkMode) {
                //  icon = icon.replace("-circle","");
                //}
                return icon;
              ]]]
            styles:
              icon:
                - color: "rgba(var(--primary-text-color),1)"

          # distance 10 - 100+ miles
          - operator: "template"
            value: >
              [[[
                var fromHomeDistance = 0;
                if (typeof states[variables?.ulm_card_kepath_person_distance_entity]?.state !== 'undefined') {
                  fromHomeDistance = states[variables.ulm_card_kepath_person_distance_entity].state
                  if (!isNaN(fromHomeDistance)){
                    fromHomeDistance = Math.floor(fromHomeDistance);
                  }
                }
                if (fromHomeDistance >= 10 && fromHomeDistance != 0) {
                  return true;
                }
              ]]]
            icon: >
              [[[
                var fromHomeDistance = 0;
                var icon = "mdi:numeric-0-circle";
                if (typeof states[variables?.ulm_card_kepath_person_distance_entity]?.state !== 'undefined') {
                  fromHomeDistance = states[variables.ulm_card_kepath_person_distance_entity].state
                  if (!isNaN(fromHomeDistance)){
                    fromHomeDistance = Math.floor(fromHomeDistance/10);
                    if (fromHomeDistance > 9) {
                      fromHomeDistance = 9;
                    }
                    icon = icon.replace("0",fromHomeDistance);
                  }
                }
                if(hass.themes.darkMode) {
                  icon = icon.replace("-circle","");
                }
                return icon;
              ]]]
            styles:
              img_cell:
                - background-color: "var(--card-background-color)"
              #   - border-color: >
              #       [[[
              #         var color = "rgba(var(--card-background-color),1)";
              #         var fromHomeDistance = 0;
              #         if (typeof states[variables?.ulm_card_kepath_person_distance_entity]?.state !== 'undefined') {
              #           if (states[variables.ulm_card_kepath_person_distance_entity].state) {
              #             fromHomeDistance = states[variables.ulm_card_kepath_person_distance_entity].state
              #             if (!isNaN(fromHomeDistance)){
              #               fromHomeDistance = Math.floor(fromHomeDistance);
              #             }
              #           }
              #         }
              #         if (fromHomeDistance > 10) {
              #           fromHomeDistance = Math.floor(fromHomeDistance / 5) * 5;
              #           if (fromHomeDistance > 100) {
              #             fromHomeDistance = 100;
              #           }
              #           var gradient = "gradient_" + fromHomeDistance
              #           if (variables?.green_to_red_5step?.[gradient]) {
              #             color = variables?.green_to_red_5step?.[gradient];
              #           }
              #         }
              #         return color;
              #       ]]]
              #   - margin-left: "1px"
              #   - margin-top: "1px"
              #   - border: "0"
              icon:
                # - width: "16px"
                # - height: "16px"
                # - color: "rgba(var(--primary-text-color),1)"
                - color: >
                    [[[
                      var color = "rgba(var(--card-background-color),1)";
                      var fromHomeDistance = 0;
                      //if (!hass.themes.darkMode) {
                      //  return color;
                      //}
                      var gradientSet = hass.themes.darkMode ? "green_to_red_5step_light" : "green_to_red_5step_dark";

                      if (typeof states[variables?.ulm_card_kepath_person_distance_entity]?.state !== 'undefined') {
                        if (states[variables.ulm_card_kepath_person_distance_entity].state) {
                          fromHomeDistance = states[variables.ulm_card_kepath_person_distance_entity].state
                          if (!isNaN(fromHomeDistance)) {
                            fromHomeDistance = Math.floor(fromHomeDistance);
                          }
                        }
                      }
                      if (fromHomeDistance > 10) {
                        fromHomeDistance = Math.floor(fromHomeDistance / 5) * 5;
                        if (fromHomeDistance > 100) {
                          fromHomeDistance = 100;
                        }
                        var gradient = "gradient_" + fromHomeDistance
                        if (variables?.[gradientSet]?.[gradient]) {
                          color = variables?.[gradientSet]?.[gradient];
                        }
                      }

                      //hass.callService('system_log', 'write', {level:'warning',message:'fromHomeDistance: ' + fromHomeDistance});
                      //hass.callService('system_log', 'write', {level:'warning',message:'gradientSet: ' + gradientSet});
                      //hass.callService('system_log', 'write', {level:'warning',message:'gradient: ' + gradient});
                      //hass.callService('system_log', 'write', {level:'warning',message:'color: ' + color});

                      return color;
                    ]]]

          # location is NOT-HOME, but close to home
          - operator: "template"
            value: >
              [[[
                var fromHomeDistance = 0;
                var personLocation = "unknown";

                if (typeof states[variables?.ulm_card_kepath_person_distance_entity]?.state !== 'undefined') {
                  fromHomeDistance = states[variables.ulm_card_kepath_person_distance_entity].state
                  if (!isNaN(fromHomeDistance)){
                    fromHomeDistance = Math.floor(fromHomeDistance);
                  }
                }
                if (typeof variables?.ulm_card_kepath_person_entity !== 'undefined') {
                  if (typeof states[variables?.ulm_card_kepath_person_entity]?.state !== 'undefined') {
                    personLocation = states[variables.ulm_card_kepath_person_entity].state.replace(" ", "").toLowerCase();
                  }
                }                

                if (fromHomeDistance < 2 && personLocation == 'not-home') {
                  return true;
                }
              ]]]
            icon: "mdi:home"
            styles:
              icon:
                - color: "rgba(var(--color-red),1)"
              img_cell:
                - background-color: "rgba(var(--color-red),0.2)"
        tap_action:
          action: "more-info"
          entity: "[[[ return variables.ulm_card_kepath_person_gps_tracker ]]]"


    battery:
      card:
        type: "custom:button-card"
        styles:
          icon:
            - width: "14px"
            - height: "14px"
            - line-height: "0"
            - color: >
                [[[
                  var color = "rgba(var(--color-theme),0.5)";
                  var battery = -1;
                  if (typeof states[variables?.ulm_card_kepath_person_battery_entity]?.state !== 'undefined') {
                    if (!isNaN(states[variables.ulm_card_kepath_person_battery_entity].state)) {
                      battery = states[variables.ulm_card_kepath_person_battery_entity].state;
                      if (battery > 50) {
                        color = "rgba(var(--color-green),1)";
                      } else if (battery > 20) {
                        color = "rgba(var(--color-yellow),1)";
                      } else if (battery > 0) {
                        color = "rgba(var(--color-red),1)";
                      } else {
                        color = "var(--color-grey)";
                      }
                    }
                  }
                  return color;
                ]]]
          img_cell:
            - border-radius: "50%"
            - background-color: "var(--card-background-color)"
            - height: "16px"
            - width: "16px"
            - border: "2px solid var(--card-background-color)"
          card:
            - height: "100%"
            - box-shadow: "none"
            - padding: "0px"
            - border-radius: "50%"
        icon: >
          [[[
            var icon = "mdi:battery-unknown";
            var batteryChargeLevel = -1;
            var isBatteryCharging = false;
            if (typeof states[variables?.ulm_card_kepath_person_battery_entity]?.state !== 'undefined') {
              if (!isNaN(states[variables.ulm_card_kepath_person_battery_entity].state)) {
                batteryChargeLevel = states[variables.ulm_card_kepath_person_battery_entity].state
              }
            }
            if (typeof states[variables?.ulm_card_kepath_person_battery_entity]?.attributes?.battery_status !== 'undefined') {
              if (states[variables.ulm_card_kepath_person_battery_entity].attributes.battery_status.toLowerCase() == "charging") {
                isBatteryCharging = true;
              }
            }

            if (batteryChargeLevel != -1) {
              batteryChargeLevel = Math.floor(batteryChargeLevel / 10) * 10;
              icon = isBatteryCharging ? "mdi:battery-charging" : "mdi:battery";
              switch (batteryChargeLevel) {
                case 0:
                  icon = `${icon}-outline`;
                  break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                  icon = `${icon}-${batteryChargeLevel}`;
                  break;
                case 100:
                  break;
                default:
                  icon = "mdi:battery-alert";
              }
            }

            return icon;
          ]]]
        tap_action:
          action: "more-info"
          entity: "[[[ return variables.ulm_card_kepath_person_battery_entity ]]]"

custom_popup_kepath_person:
  tap_action:
    action: "fire-dom-event"
    browser_mod:
      service: "browser_mod.sequence"
      data:
        sequence:
          - service: "browser_mod.popup"
            data:
              title: "[[[ return states[variables.ulm_card_kepath_person_entity].attributes.friendly_name ]]]"
              style:
                $: >
                  [[[
                    if (hass.themes.theme.includes("desktop")){
                      var dialog = `
                        .mdc-dialog__surface{
                          border-radius: var(--border-radius) !important;
                        }
                      `;
                    } else{
                      var dialog = "";
                    }
                    return `
                      *{
                        --secondary-background-color: none !important;
                      }
                      ${dialog}
                    `;
                  ]]]
                hui-vertical-stack-card:
                  $: >
                    button-card {
                      align-self: center;
                      padding: 0.2em 0 2.3em 0;
                    }
                    hui-entities-card{
                      padding: 0.8em 1.4em;
                    }
                  $hui-entities-card$: >
                    ha-card{
                      box-shadow: none;
                    }
                  $hui-history-graph-card$: >
                    .content {
                      padding: 0 2.4em !important;
                    }
                    ha-card{
                      box-shadow: none;
                    }
                  $hui-glance-card$: >
                    ha-card{
                      box-shadow: none;
                    }
                  $hui-map-card:
                    $: >
                      ha-icon-button {
                        color: rgba(var(--color-blue),1);
                      }
                    $ha-map:
                      $: >
                        .leaflet-control-attribution {
                          display: none;
                        }
                        .leaflet-touch .leaflet-control-layers, .leaflet-touch .leaflet-bar {
                          border: 2px solid rgba(var(--color-blue),0.4) !important;
                        }
                        .leaflet-bar a {
                          background-color: rgba(var(--color-blue),0.2) !important;
                          color: rgba(var(--color-blue),1) !important;
                        }
                        .leaflet-bar a:first-child {
                          border-bottom: 2px solid rgba(var(--color-blue),0.4) !important;
                        }
                        .leaflet-pane.leaflet-tile-pane {
                          filter: contrast(95%);
                        }
              content:
                type: "vertical-stack"
                cards:
                  - type: "entities"
                    entities:
                      - entity: "[[[ return variables.ulm_card_kepath_person_entity; ]]]"
                        secondary_info: "last-changed"
                  - type: "history-graph"
                    entities:
                      - entity: "[[[ return variables.ulm_card_kepath_person_entity; ]]]"
                  - type: "glance"
                    show_state: false
                    entities:
                      - entity: "[[[ return variables.ulm_card_kepath_person_wifi_tracker; ]]]"
                        name: "WiFi"
                        icon: "mdi:wifi"
                        style: &state >
                          state-badge{
                            color: {{ 'rgba(var(--color-blue),1)' if is_state(config.entity, 'home') }};
                            filter: {{ 'opacity(100%)' if is_state(config.entity, 'home') else 'opacity(40%)'}};
                          }
                      - entity: "[[[ return variables.ulm_card_kepath_person_gps_tracker; ]]]"
                        name: "GPS"
                        icon: "mdi:map-marker"
                        style: *state
                  - type: "horizontal-stack"
                    cards:
                      - type: "custom:button-card"
                        template:
                          - "find_my_phone_button_kepath"
                        variables:
                          findmy_device: "[[[ return variables.ulm_card_kepath_person_findmy_device; ]]]"
                      - type: "custom:button-card"
                        template:
                          - "about_my_phone_button_kepath"
                        variables:
                          device_id: >
                            [[[
                              var deviceId = "";
                              if (variables?.ulm_card_kepath_person_gps_tracker) {
                                if (typeof hass?.entities[variables.ulm_card_kepath_person_gps_tracker]?.device_id !== 'undefined') {
                                  deviceId = hass.entities[variables.ulm_card_kepath_person_gps_tracker].device_id;
                                }
                              }
                              return deviceId;
                            ]]]
                  - type: "map"
                    auto_fit: true
                    aspect_ratio: "12x10"
                    hours_to_show: 48
                    entities: "[[[ return [variables.ulm_card_kepath_person_gps_tracker]; ]]]"
          - service: "icloud3.action"
            data:
              command: "Locate Device(s) using iCloud"

find_my_phone_button_kepath:
  template:
    - "ulm_custom_card_kepath_person_language_variables"
    - "popup_button_layout_kepath"
  tap_action:
    action: "fire-dom-event"
    browser_mod:
      service: "icloud3.find_iphone_alert"
      data:
        device_name: "[[[ return variables.findmy_device; ]]]"
  icon: "mdi:volume-high"
  name: "Find my iPhone"

about_my_phone_button_kepath:
  template:
    - "ulm_custom_card_kepath_person_language_variables"
    - "popup_button_layout_kepath"
  tap_action:
    action: "fire-dom-event"
    browser_mod:
      service: "browser_mod.sequence"
      data:
        sequence:
          - service: "browser_mod.close_popup"
          - service: "browser_mod.navigate"
            data:
              path: >
                [[[
                  return "/config/devices/device/" + variables.device_id;
                ]]]
  icon: "mdi:cellphone-cog"
  name: "About my iPhone"

popup_button_layout_kepath:
  size: "1.4em"
  styles:
    icon:
      - color: "rgba(var(--color-blue),1)"
    name:
      - font-size: "1.06em"
      - letterspacing: "0.015em"
    grid:
      - grid-template-areas: "'i n'"
      - grid-column-gap: "0.3em"
    card:
      - color: "rgba(var(--color-blue),1)"
      # - background-color: "rgba(var(--color-blue),0.2"
      - border-radius: "0.6em"
      - padding: "1em 1.4em"
      - width: "max-content"
      - font-size: "1.06em"
      - font-weight: "500"
      - letter-spacing: "0.015em"
      - box-shadow: "none"
