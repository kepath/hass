---
device_kepath_tumble_dryer_state:
  variables:
    ulm_device_kepath_tumble_dryer_state:
      entity: >
        [[[
          //var entity_id = funckepathGetVariableState(undefined, entity, entity_id);
          //var entity = funckepathGetVariableState(entity_id, variables, ulm_device_kepath_tumble_dryer_state, device_status);
          var entity = entity?.entity_id;
          if (variables?.ulm_device_kepath_tumble_dryer_state) {
            if (variables?.ulm_device_kepath_tumble_dryer_state?.device_status) {
              deviceStatus = variables?.ulm_device_kepath_tumble_dryer_state?.device_status;
            }
          }
          //funckepathTestResource();

          return entity;
        ]]]
      device_progress: >
        [[[
          var deviceProgress = "";
          if (variables?.ulm_device_kepath_tumble_dryer_state) {
            if (variables?.ulm_device_kepath_tumble_dryer_state?.device_progress) {
              deviceProgress = variables?.ulm_device_kepath_tumble_dryer_state?.device_progress;
            }
          }

          return deviceProgress;
        ]]]
  state:
    - operator: "template"
      value: >
        [[[
          return (states[variables.ulm_device_kepath_tumble_dryer_state.entity].state.toLowerCase() == 'run')
        ]]]
      icon: >
        [[[
          var icon = "mdi:tumble-dryer";
          var finishDate = states[variables.ulm_device_kepath_tumble_dryer_state.device_progress].state;
          var hours = 0;
          if (!isNaN(Date.parse(finishDate)) && finishDate !== undefined) {
            var milliseconds = Date.parse(finishDate) - Date.now();
            if(!isNaN(parseInt(milliseconds))) {
              hours = (milliseconds / (1000 * 60 * 60)).toFixed();
              if (hours > 0) {
                icon = "mdi:numeric-" + hours + "-circle-outline";
              }
            }
          }

          return icon;
        ]]]
      styles:
        icon:
          - color: "rgba(var(--color-green),1)"
        img_cell:
          - background-color: "rgba(var(--color-green), 0.2)"
    - operator: "template"
      value: >
        [[[
          return (states[variables.ulm_device_kepath_tumble_dryer_state.entity].state.toLowerCase() == 'unknown'
                  || states[variables.ulm_device_kepath_tumble_dryer_state.entity].state.toLowerCase() == 'unavailable'
                  || states[variables.ulm_device_kepath_tumble_dryer_state.entity].state.toLowerCase() == 'pause')
        ]]]
      icon: "mdi:tumble-dryer-off"
      styles:
        icon:
          - color: "rgba(var(--color-red),1)"
        img_cell:
          - background-color: "rgba(var(--color-red), 0.2)"
    - operator: "default"
      icon: "mdi:tumble-dryer"
      styles:
        icon:
          - color: "rgba(var(--color-blue),1)"
        img_cell:
          - background-color: "rgba(var(--color-blue), 0.2)"
