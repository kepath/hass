---
generic_set_icon_and_color:
  variables:
    ulm_card_kepath_generic_icon_appearance:
      evaluated_object: >
        [[[
          var entity = entity.entity_id;
          if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.evaluated_object) {
            entity = variables.ulm_card_kepath_extra_templates_icon_appearance.evaluated_object;
          }
          return entity;
        ]]]
      evaluated_state: >
          [[[
            var evaluatedState = "";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.evaluated_state) {
              evaluatedState = variables.ulm_card_kepath_extra_templates_icon_appearance.evaluated_state;
            }
            return evaluatedState;
          ]]]
      use_theme_colors: >
        [[[
          var useThemeColors = false;
          if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.use_theme_colors) {
            if (typeof variables.ulm_card_kepath_extra_templates_icon_appearance.use_theme_colors === "boolean") {
              useThemeColors = variables.ulm_card_kepath_extra_templates_icon_appearance.use_theme_colors;
            }
          }
          return useThemeColors;
        ]]]
      default:
        icon: >
          [[[
            var setIcon = "mdi:close-circle";
            if (entity?.attributes?.icon) {
              setIcon = entity.attributes.icon;
            }
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.default_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.default_state?.icon) {
                  setIcon = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.default_state.icon;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.default_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.default_state?.icon) {
                    setIcon = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.default_state.icon;
                  }
                }
              }
            }
            return setIcon;
          ]]]
        icon_color: >
          [[[
            var setColor = "red";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.default_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.default_state?.icon_color) {
                  setColor = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.default_state.icon_color;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.default_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.default_state?.icon_color) {
                    setColor = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.default_state.icon_color;
                  }
                }
              }
            }
            return setColor;
          ]]]
        background_color: >
          [[[
            var setBGColor = "grey";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.default_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.default_state?.background_color) {
                  setBGColor = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.default_state.background_color;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.default_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.default_state?.background_color) {
                    setBGColor = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.default_state.background_color;
                  }
                }
              }
            }
            return setBGColor;
          ]]]
      triggered:
        matching_type: >
          [[[
            var matchingType = "eq";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state?.matching_type) {
                  matchingType = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_state.matching_type;
                }
              }
            }
            return matchingType;
          ]]]
        matching_state: >
          [[[
            var matchingState = "on";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state?.matching_state) {
                  matchingState = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_state.matching_state;
                }
              }
            }
            return matchingState;
          ]]]
        icon: >
          [[[
            var setIcon = "mdi:close-circle";
            if (entity?.attributes?.icon) {
              setIcon = entity.attributes.icon;
            }
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state?.icon) {
                  setIcon = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_state.icon;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_state?.icon) {
                    setIcon = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.triggered_state.icon;
                  }
                }
              }
            }
            return setIcon;
          ]]]
        icon_color: >
          [[[
            var setColor = "red";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state?.icon_color) {
                  setColor = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_state.icon_color;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_state?.icon_color) {
                    setColor = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.triggered_state.icon_color;
                  }
                }
              }
            }
            return setColor;
          ]]]
        background_color: >
          [[[
            var setBGColor = "grey";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_state?.background_color) {
                  setBGColor = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_state.background_color;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_state?.background_color) {
                    setBGColor = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.triggered_state.background_color;
                  }
                }
              }
            }
            return setBGColor;
          ]]]
      triggered_alt:
        matching_type: >
          [[[
            var matchingType = "alt_type";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state?.matching_type) {
                  matchingType = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_alt_state.matching_type;
                }
              }
            }
            return matchingType;
          ]]]
        matching_state: >
          [[[
            var matchingState = "alt_state";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state?.matching_state) {
                  matchingState = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_alt_state.matching_state;
                }
              }
            }
            return matchingState;
          ]]]
        icon: >
          [[[
            var setIcon = "mdi:close-circle";
            if (entity?.attributes?.icon) {
              setIcon = entity.attributes.icon;
            }
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state?.icon) {
                  setIcon = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_alt_state.icon;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_alt_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_alt_state?.icon) {
                    setIcon = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.triggered_alt_state.icon;
                  }
                }
              }
            }
            return setIcon;
          ]]]
        icon_color: >
          [[[
            var setColor = "red";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state?.icon_color) {
                  setColor = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_alt_state.icon_color;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_alt_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_alt_state?.icon_color) {
                    setColor = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.triggered_alt_state.icon_color;
                  }
                }
              }
            }
            return setColor;
          ]]]
        background_color: >
          [[[
            var setBGColor = "grey";
            if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.default_theme?.triggered_alt_state?.background_color) {
                  setBGColor = variables.ulm_card_kepath_extra_templates_icon_appearance.default_theme.triggered_alt_state.background_color;
                }
              }
            }
            if (hass.themes.darkMode) {
              if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme) {
                if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_alt_state) {
                  if (variables?.ulm_card_kepath_extra_templates_icon_appearance?.dark_theme?.triggered_alt_state?.background_color) {
                    setBGColor = variables.ulm_card_kepath_extra_templates_icon_appearance.dark_theme.triggered_alt_state.background_color;
                  }
                }
              }
            }
            return setBGColor;
          ]]]


  state:
    - operator: "template"
      value: >
        [[[
          var stateValue = false;
          var evaluatedState = "";
          var matchedStates = "";
          var matchType = "in";
          const matchedTypes = ['gt','lt','eq','in','not_in','not_eq'];
          var isMatched = false;

          if (variables.ulm_card_kepath_generic_icon_appearance.evaluated_state == "" || variables.ulm_card_kepath_generic_icon_appearance.evaluated_state === undefined) {
            if (states[variables.ulm_card_kepath_generic_icon_appearance.evaluated_object]?.state) {
              evaluatedState = states[variables.ulm_card_kepath_generic_icon_appearance.evaluated_object].state
              //hass.callService('system_log', 'write', {level:'info',message:'evaluated_object evaluatedState: '+evaluatedState});
            }
          } else {
            evaluatedState = variables.ulm_card_kepath_generic_icon_appearance.evaluated_state;
            //hass.callService('system_log', 'write', {level:'info',message:'evaluated_state evaluatedState: '+evaluatedState});
          }
          //hass.callService('system_log', 'write', {level:'info',message:'evaluated_object: '+variables.ulm_card_kepath_generic_icon_appearance.evaluated_object});
          //hass.callService('system_log', 'write', {level:'info',message:'evaluatedState: '+evaluatedState});
          if (variables.ulm_card_kepath_generic_icon_appearance.triggered.matching_state !== undefined) {
            matchedStates = variables.ulm_card_kepath_generic_icon_appearance.triggered.matching_state;
            //hass.callService('system_log', 'write', {level:'info',message:'matchedStates: '+matchedStates});
          }
          if (variables.ulm_card_kepath_generic_icon_appearance.triggered.matching_type) {
            matchType = variables.ulm_card_kepath_generic_icon_appearance.triggered.matching_type;
            //hass.callService('system_log', 'write', {level:'info',message:'matchType: '+matchType});
            for (let i = 0; i < matchedTypes.length; i++) {
              if (matchType == matchedTypes[i]){
                matchType = matchedTypes[i];
              }
            }
          }
          //hass.callService('system_log', 'write', {level:'info',message:'evaluated_object: '+variables.ulm_card_kepath_generic_icon_appearance.evaluated_object});
          switch (true) {
            case matchType == "gt":
            case matchType == "lt": {
              var matchedStateInt;
              var evaluatedStateInt;
              if (matchedStates.length == 1) {
                matchedStateInt = parseInt(matchedStates);
                evaluatedStateInt = parseInt(evaluatedState);
              }
              //hass.callService('system_log', 'write', {level:'info',message:'gt:lt matchedStateInt: '+matchedStateInt+', typeof: '+typeof(matchedStateInt)});
              //hass.callService('system_log', 'write', {level:'info',message:'gt:lt evaluatedStateInt: '+evaluatedStateInt+', typeof: '+typeof(evaluatedStateInt)});
              if ((!isNaN(matchedStateInt)) && (matchedStateInt !== undefined)) {
                if ((!isNaN(evaluatedStateInt)) && (evaluatedStateInt !== undefined)) {
                  if ((matchType == "gt") && (evaluatedStateInt > matchedStateInt)) {
                    stateValue = true;
                    //hass.callService('system_log', 'write', {level:'info',message:'gt stateValue: '+stateValue});
                  }
                  if ((matchType == "lt") && (evaluatedStateInt < matchedStateInt )) {
                    stateValue = true;
                    //hass.callService('system_log', 'write', {level:'info',message:'lt stateValue: '+stateValue});
                  }
                }
              }
              break;
            }
            case matchType == "eq":
            case matchType == "not_eq": {
              if ((matchedStates !== undefined) && (evaluatedState !== undefined)) {
                //hass.callService('system_log', 'write', {level:'info',message:'defined'});
                //hass.callService('system_log', 'write', {level:'info',message:'matchedStates length: '+matchedStates.length});
                //if (matchedStates.length == 1) {
                  //hass.callService('system_log', 'write', {level:'info',message:'length'});
                if (matchedStates == evaluatedState) {
                  //hass.callService('system_log', 'write', {level:'info',message:'equal'});
                  isMatched = true;
                  stateValue = true;
                }
                if (matchType == "not_eq") {
                  if (isMatched) {
                    stateValue = false;
                  } else {
                    stateValue = true;
                  }
                }
                //}
                //hass.callService('system_log', 'write', {level:'info',message:'(not_)eq stateValue: '+stateValue});
              }
              break;
            }
            case matchType == "in":
            case matchType == "not_in": {
              if ((matchedStates !== undefined) && (evaluatedState !== undefined)) {
                for (let i = 0; i < matchedStates.length; i++) {
                  if (evaluatedState == matchedStates[i]) {
                    //hass.callService('system_log', 'write', {level:'info',message:'in:not_in matchedStates[i]: '+matchedStates[i]+', typeof: '+typeof(matchedStates)});
                    //hass.callService('system_log', 'write', {level:'info',message:'in:not_in evaluatedState: '+evaluatedState+', typeof: '+typeof(evaluatedState)});
                    isMatched = true;
                    stateValue = true;
                  }
                }
                if (matchType == "not_in") {
                  if (isMatched) {
                    stateValue = false;
                  } else {
                    stateValue = true;
                  }
                }
                //hass.callService('system_log', 'write', {level:'info',message:'(not_)in stateValue: '+stateValue});
              }
              break;
            }
            default:
              stateValue = false;
              //hass.callService('system_log', 'write', {level:'info',message:'7 stateValue: '+stateValue});
          }
          //hass.callService('system_log', 'write', {level:'info',message:'8 stateValue: '+stateValue});
          //hass.callService('system_log', 'write', {level:'info',message:'8 matchType: '+matchType});
          //hass.callService('system_log', 'write', {level:'info',message:'stateValue: '+stateValue});

          return stateValue;
        ]]]
      icon: >
        [[[
          var icon = "mdi:close-circle";
          if (variables.ulm_card_kepath_generic_icon_appearance.triggered.icon != icon) {
            icon = variables.ulm_card_kepath_generic_icon_appearance.triggered.icon;
          } else {
            icon = variables.ulm_card_kepath_generic_icon_appearance.default.icon;
          }
          return icon;
        ]]]
      styles:
        icon:
          - color: >
              [[[
                var returnedColor = "red";
                var testColor = "red";
                const colorOptions = ['color-grey', 'color-red', 'color-green', 'color-yellow', 'color-blue', 'color-purple', 'color-pink', 'color-amber', 'color-theme'];
                if (variables.ulm_card_kepath_generic_icon_appearance.triggered.icon_color != returnedColor) {
                  testColor = variables.ulm_card_kepath_generic_icon_appearance.triggered.icon_color;
                } else {
                  testColor = variables.ulm_card_kepath_generic_icon_appearance.default.icon_color;
                }
                if (variables.ulm_card_kepath_generic_icon_appearance.use_theme_colors) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (testColor.includes(colorOptions[i])){
                      returnedColor = testColor;
                    }
                  }
                } else {
                  returnedColor = testColor;
                }
                return returnedColor;
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedBGColor = "grey";
                var testBGColor = "grey";
                const colorOptions = ['color-grey', 'color-red', 'color-green', 'color-yellow', 'color-blue', 'color-purple', 'color-pink', 'color-amber', 'color-theme'];
                if (variables.ulm_card_kepath_generic_icon_appearance.triggered.background_color != returnedBGColor) {
                  testBGColor = variables.ulm_card_kepath_generic_icon_appearance.triggered.background_color;
                } else {
                  testBGColor = variables.ulm_card_kepath_generic_icon_appearance.default.background_color;
                }
                if (variables.ulm_card_kepath_generic_icon_appearance.use_theme_colors) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (testBGColor.includes(colorOptions[i])){
                      returnedBGColor = testBGColor;
                    }
                  }
                } else {
                  returnedBGColor = testBGColor;
                }
                return returnedBGColor;
              ]]]


    - operator: "template"
      value: >
        [[[
          var stateValue = false;
          var evaluatedState = "";
          var matchedStates = "";
          var matchType = "in";
          const matchedTypes = ['gt','lt','eq','in'];
          var isMatched = false;

          if (variables.ulm_card_kepath_generic_icon_appearance.evaluated_state == "" || variables.ulm_card_kepath_generic_icon_appearance.evaluated_state === undefined) {
            if (states[variables.ulm_card_kepath_generic_icon_appearance.evaluated_object]?.state) {
              evaluatedState = states[variables.ulm_card_kepath_generic_icon_appearance.evaluated_object].state
            }
          } else {
            evaluatedState = variables.ulm_card_kepath_generic_icon_appearance.evaluated_state;
          }
          hass.callService('system_log', 'write', {level:'info',message:'evaluated_object: '+variables.ulm_card_kepath_generic_icon_appearance.evaluated_object});
          if (variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.matching_state !== undefined) {
            matchedStates = variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.matching_state;
          }
          if (variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.matching_type) {
            matchType = variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.matching_type;
            for (let i = 0; i < matchedTypes.length; i++) {
              if (matchType == matchedTypes[i]){
                matchType = matchedTypes[i];
              }
            }
          }
          switch (true) {
            case matchType == "gt":
            case matchType == "lt": {
              var matchedStateInt;
              var evaluatedStateInt;
              if (matchedStates.length == 1) {
                matchedStateInt = parseInt(matchedStates);
                evaluatedStateInt = parseInt(evaluatedState);
              }
              if ((!isNaN(matchedStateInt)) && (matchedStateInt !== undefined)) {
                if ((!isNaN(evaluatedStateInt)) && (evaluatedStateInt !== undefined)) {
                  if ((matchType == "gt") && (evaluatedStateInt > matchedStateInt)) {
                    stateValue = true;
                  }
                  if ((matchType == "lt") && (evaluatedStateInt < matchedStateInt )) {
                    stateValue = true;
                  }
                }
              }
              break;
            }
            case matchType == "eq": {
              if ((matchedStates !== undefined) && (evaluatedState !== undefined)) {
                if (matchedStates.length == 1) {
                  if (matchedStates == evaluatedState) {
                    stateValue = true;
                  }
                }
              }
              break;
            }
            case matchType == "in": {
              if ((matchedStates !== undefined) && (evaluatedState !== undefined)) {
                hass.callService('system_log', 'write', {level:'info',message:'in: matchedStates[i]: '+matchedStates+', typeof: '+typeof(matchedStates)});
                hass.callService('system_log', 'write', {level:'info',message:'in: evaluatedState: '+evaluatedState+', typeof: '+typeof(evaluatedState)});
                for (let i = 0; i < matchedStates.length; i++) {
                  if (evaluatedState == matchedStates[i]) {
                    stateValue = true;
                  }
                }
              }
              hass.callService('system_log', 'write', {level:'info',message:'(not_)in stateValue: '+stateValue});
              break;
            }
            default:
              stateValue = false;
          }

          return stateValue;
        ]]]
      icon: >
        [[[
          var icon = "mdi:close-circle";
          if (variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.icon != icon) {
            icon = variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.icon;
          } else {
            icon = variables.ulm_card_kepath_generic_icon_appearance.default.icon;
          }
          return icon;
        ]]]
      styles:
        icon:
          - color: >
              [[[
                var returnedColor = "red";
                var testColor = "red";
                const colorOptions = ['color-grey', 'color-red', 'color-green', 'color-yellow', 'color-blue', 'color-purple', 'color-pink', 'color-amber', 'color-theme'];
                if (variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.icon_color != returnedColor) {
                  testColor = variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.icon_color;
                } else {
                  testColor = variables.ulm_card_kepath_generic_icon_appearance.default.icon_color;
                }
                if (variables.ulm_card_kepath_generic_icon_appearance.use_theme_colors) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (testColor.includes(colorOptions[i])){
                      returnedColor = testColor;
                    }
                  }
                } else {
                  returnedColor = testColor;
                }
                return returnedColor;
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedBGColor = "grey";
                var testBGColor = "grey";
                const colorOptions = ['color-grey', 'color-red', 'color-green', 'color-yellow', 'color-blue', 'color-purple', 'color-pink', 'color-amber', 'color-theme'];
                if (variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.background_color != returnedBGColor) {
                  testBGColor = variables.ulm_card_kepath_generic_icon_appearance.triggered_alt.background_color;
                } else {
                  testBGColor = variables.ulm_card_kepath_generic_icon_appearance.default.background_color;
                }
                if (variables.ulm_card_kepath_generic_icon_appearance.use_theme_colors) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (testBGColor.includes(colorOptions[i])){
                      returnedBGColor = testBGColor;
                    }
                  }
                } else {
                  returnedBGColor = testBGColor;
                }
                return returnedBGColor;
              ]]]


    - operator: "default"
      icon: "[[[ return variables.ulm_card_kepath_generic_icon_appearance.default.icon; ]]]"
      styles:
        icon:
          - color: "[[[ return variables.ulm_card_kepath_generic_icon_appearance.default.icon_color; ]]]"
        img_cell:
          - background-color: "[[[ return variables.ulm_card_kepath_generic_icon_appearance.default.background_color; ]]]"
