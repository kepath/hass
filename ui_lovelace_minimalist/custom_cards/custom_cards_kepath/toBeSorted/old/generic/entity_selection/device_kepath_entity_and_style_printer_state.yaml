# ---
# device_kepath_entity_and_style_printer_state:
#   variables:
#     var_kepath_device_entity_and_style_binary_count_state:
#       entity:
#         evaluated_entity: "sensor.mfc_j870dw_status"
#       style:
#         use_themes: true
#         icon: "mdi:printer-off"
#         icon_color: "blue"
#         background_color: "blue"
#     var_kepath_generic_get_set_group_button_objects:
#       unset_state:
#         icon: "mdi:printer-alert"
#         icon_color: "red"
#         background_color: "red"

#   state:
#     - operator: "template"
#       value: >
#         [[[
#           var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;

#           var resolvedState;
#           var returnValue = false;

#           resolvedState = states[evaluatedStateEntity].state.toLowerCase();
#           //hass.callService('system_log', 'write', {level:'warning',message:'resolvedState: ' + resolvedState});
#           if (typeof resolvedState !== 'undefined') {
#             if (resolvedState.includes('low')) {
#               returnValue = true;
#             }
#           }

#           return returnValue;
#         ]]]
#       icon: "[[[return variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;]]]"
#       styles:
#         icon:
#           - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color}),1)`; ]]]"
#         img_cell:
#           - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color}),0.2)`; ]]]"
#     - operator: "template"
#       value: >
#         [[[
#           var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;

#           var resolvedState;
#           var returnValue = false;

#           resolvedState = states[evaluatedStateEntity].state.toLowerCase();
#           if (typeof resolvedState !== 'undefined') {
#             if (resolvedState.includes('jam')||
#             resolvedState.includes('replace')||
#             resolvedState.includes('cannot')||
#             resolvedState.includes('cover')||
#             resolvedState.includes('unable')||
#             resolvedState.includes('unusable')||
#             resolvedState.includes('wrong')||
#             resolvedState.includes('full')) {
#               returnValue = true;
#             }
#           }

#           return returnValue;
#         ]]]
#       icon: "[[[return variables?.var_kepath_generic_get_set_group_button_objects?.unset_state?.icon;]]]"
#       styles:
#         icon:
#           - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_generic_get_set_group_button_objects?.unset_state?.icon_color}),1)`; ]]]"
#         img_cell:
#           - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_generic_get_set_group_button_objects?.unset_state?.background_color}),0.2)`; ]]]"
