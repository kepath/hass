---
device_kepath_entity_state_isequal:
  state:
    - operator: "template"
      id: >
        [[[]]]
      value: >
        [[[
            var triggerEntityDefault = "sensor.binary_sensor_state_counts";
            var triggerEntity;
            var triggerIsAttributeDefault = true;
            var triggerIsAttribute;
            var triggerAttributeDefault = "zero_value";
            var triggerAttribute;
            var triggerStateDefault = "on";
            var triggerState;
            var triggerTemplateIndexDefault = 0;
            var triggerTemplateIndex = "trigger_0";
            var triggerEntityValue;
            var triggerArray;
            var isTriggered = false;

            if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.source_entity !== 'undefined') {
              triggerEntity = variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.source_entity;
            } else {
              triggerEntity = triggerEntityDefault;
            }
            if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.is_attribute !== 'undefined') {
              if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.is_attribute === 'boolean') {
                triggerIsAttribute = variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.is_attribute;
              } else {
                triggerIsAttribute = triggerIsAttributeDefault;
              }
            } else {
              triggerIsAttribute = triggerIsAttributeDefault;
            }
            if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.attribute_name !== 'undefined') {
              triggerAttribute = variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.attribute_name;
            } else {
              triggerAttribute = triggerAttributeDefault;
            }
            if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.trigger_value !== 'undefined') {
              triggerState = variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.trigger?.trigger_value;
            } else {
              triggerState = triggerStateDefault;
            }

            if (triggerIsAttribute) {
              if (typeof states[triggerEntity].attributes[triggerAttribute] !== 'undefined') {
                triggerEntityValue = states[triggerEntity].attributes[triggerAttribute];
              }
            } else {
              if (typeof states[triggerEntity].state !== 'undefined') {
                triggerEntityValue = states[triggerEntity].state;
              }
            }

            if (typeof triggerEntityValue !== 'undefined') {
              if (triggerEntityValue == triggerState) {
                isTriggered = true;
              }
            }

            //hass.callService('system_log', 'write', {level:'warning',message:'triggerTemplateIndex: ' + triggerTemplateIndex});
            //hass.callService('system_log', 'write', {level:'warning',message:'variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states?.[triggerTemplateIndex]: ' + variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states?.[triggerTemplateIndex]});
            //hass.callService('system_log', 'write', {level:'warning',message:'variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states?.[0]: ' + variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states?.[0]});

            //hass.callService('system_log', 'write', {level:'warning',message:'triggerEntity: ' + triggerEntity});
            //hass.callService('system_log', 'write', {level:'warning',message:'triggerAttribute: ' + triggerAttribute});
            //hass.callService('system_log', 'write', {level:'warning',message:'triggerState: ' + triggerState});
            //hass.callService('system_log', 'write', {level:'warning',message:'triggerEntityValue: ' + triggerEntityValue});
            //hass.callService('system_log', 'write', {level:'warning',message:'isTriggered: ' + isTriggered});

            return isTriggered;

        ]]]
      icon: >
        [[[
          var backupIcon = "mdi:checkbox-marked-circle";
          var returnedIcon;
          if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.style?.icon !== 'undefined') {
            if (variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.style?.icon.includes('mdi:')) {
              returnedIcon = variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.style?.icon;
            }
          }
          if (typeof returnedIcon !== 'undefined') {
            return returnedIcon;
          } else {
            return backupIcon;
          }
        ]]]
      styles:
        icon:
          - color: >
              [[[
                var returnedColorDefault = "green";
                var returnedColor;
                var useThemesDefault = true;
                var useThemes;
                const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
                if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.use_themes !== 'undefined') {
                  if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.use_themes === 'boolean') {
                    useThemes = variables?.var_kepath_generic_get_set_group_button_objects?.use_themes;
                  } else {
                    useThemes = useThemesDefault;
                  }
                } else {
                  useThemes = useThemesDefault;
                }
                if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.style?.icon_color !== 'undefined') {
                  returnedColor = variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.style?.icon_color;
                } else {
                  returnedColor = returnedColorDefault;
                }
                if (useThemes) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (returnedColor.includes(colorOptions[i])){
                      returnedColor = "rgba(var(--color-" + returnedColor + "), 1)";
                    }
                  }
                }

                return returnedColor;
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedColorDefault = "green";
                var returnedColor;
                var useThemesDefault = true;
                var useThemes;
                const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
                if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.use_themes !== 'undefined') {
                  if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.use_themes === 'boolean') {
                    useThemes = variables?.var_kepath_generic_get_set_group_button_objects?.use_themes;
                  } else {
                    useThemes = useThemesDefault;
                  }
                } else {
                  useThemes = useThemesDefault;
                }
                if (typeof variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.style?.background_color !== 'undefined') {
                  returnedColor = variables?.var_kepath_generic_get_set_group_button_objects?.triggered_states[triggerTemplateIndex]?.style?.background_color;
                } else {
                  returnedColor = returnedColorDefault;
                }
                if (useThemes) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (returnedColor.includes(colorOptions[i])){
                      returnedColor = "rgba(var(--color-" + returnedColor + "), 0.2)";
                    }
                  }
                }

                return returnedColor;
              ]]]
