---
device_kepath_entity_and_style_lock_state:
  variables:
    var_kepath_generic_button_icon_styles:
      default_state:
        icon: "mdi:lock-open-variant"
        icon_color: "red"
        background_color: "red"
    var_kepath_device_entity_and_style_binary_count_state:
      entity:
        evaluated_entity: "sensor.binary_sensor_state_counts"
        isattribute: true
        evaluated_attribute: "occupancy_persons_home_count"
        evaluated_lock_entity: "lock.front_door_top_bolt"
        evaluated_close_entity: "binary_sensor.lock_45f7_door"
      time_boundaries:
        start: 7
        end: 21
      # locked
      style:
        use_themes: true
        icon: "mdi:lock"
        icon_color: "green"
        background_color: "green"
      # lock open - people home and within time boundary hours
      style2:
        use_themes: true
        icon: "mdi:lock-open-variant"
        icon_color: "blue"
        background_color: "blue"
      # lock jammed
      style3:
        use_themes: true
        icon: "mdi:lock-open-alert"
        icon_color: "purple"
        background_color: "purple"
      # door open
      style4:
        use_themes: true
        icon: "mdi:door-open"
        icon_color: "red"
        background_color: "red"

  state:
    - operator: "template"
      value: >
        [[[
          var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_lock_entity;

          var resolvedState;
          var returnValue = false;

          resolvedState = states[evaluatedStateEntity].state.toLowerCase();
          if (typeof resolvedState !== 'undefined') {
            if (resolvedState == 'locked') {
              returnValue = true;
            }
          }
          hass.callService('system_log', 'write', {level:'warning',message:'resolvedState: ' + resolvedState});

          return returnValue;
        ]]]
      icon: "[[[return variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;]]]"
      styles:
        icon:
          - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color}),1)`; ]]]"
        img_cell:
          - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color}),0.2)`; ]]]"
    - operator: "template"
      value: >
        [[[
          var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_lock_entity;

          var resolvedState;
          var returnValue = false;

          resolvedState = states[evaluatedStateEntity].state.toLowerCase();
          if (typeof resolvedState !== 'undefined') {
            if (resolvedState == 'jammed') {
              returnValue = true;
            }
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedBatteryState: ' + resolvedBatteryState});

          return returnValue;
        ]]]
      icon: "[[[return variables?.var_kepath_device_entity_and_style_binary_count_state?.style3?.icon;]]]"
      styles:
        icon:
          - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style3?.icon_color}),1)`; ]]]"
        img_cell:
          - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style3?.background_color}),0.2)`; ]]]"
    - operator: "template"
      value: >
        [[[
          var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_lock_entity;

          var resolvedState;
          var returnValue = false;

          resolvedState = states[evaluatedStateEntity].state.toLowerCase();
          if (typeof resolvedState !== 'undefined') {
            if (resolvedState == 'unknown' || resolvedState == 'unavailable') {
              returnValue = true;
            }
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedState: ' + resolvedState});

          return returnValue;
        ]]]
      icon: "[[[return variables?.var_kepath_generic_button_icon_styles?.default_state?.icon;]]]"
      styles:
        icon:
          - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_generic_button_icon_styles?.default_state?.icon_color}),1)`; ]]]"
        img_cell:
          - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_generic_button_icon_styles?.default_state?.background_color}),0.2)`; ]]]"

    - operator: "template"
      value: >
        [[[
          var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_close_entity;

          var resolvedState;
          var returnValue = false;

          resolvedState = states[evaluatedStateEntity].state.toLowerCase();
          if (typeof resolvedState !== 'undefined') {
            if (resolvedState == 'on') {
              returnValue = true;
            }
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedBatteryState: ' + resolvedBatteryState});

          return returnValue;
        ]]]
      icon: "[[[return variables?.var_kepath_device_entity_and_style_binary_count_state?.style4?.icon;]]]"
      styles:
        icon:
          - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style4?.icon_color}),1)`; ]]]"
        img_cell:
          - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style4?.background_color}),0.2)`; ]]]"
    - operator: "template"
      value: >
        [[[
          var evaluatedPersonsHomeEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedPersonsHomeAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

          var resolvedPersonsHomeStateDefault = 0;
          var resolvedPersonsHomeState;
          var returnValue = false;

          const currentHours = new Date().getHours();
          var startHourBoundary = variables?.var_kepath_device_entity_and_style_binary_count_state?.time_boundaries?.start;
          var startHourBoundaryDefault = 7;
          var endHourBoundary = variables?.var_kepath_device_entity_and_style_binary_count_state?.time_boundaries?.end;
          var endHourBoundaryDefault = 21;

          resolvedPersonsHomeState = states[evaluatedPersonsHomeEntity].attributes[evaluatedPersonsHomeAttribute];
          if (isNaN(resolvedPersonsHomeState) || typeof resolvedPersonsHomeState === 'undefined') {
              resolvedPersonsHomeState = resolvedPersonsHomeStateDefault;
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedPersonsHomeState: ' + resolvedPersonsHomeState});

          if (resolvedPersonsHomeState > 0) {
            if (isNaN(startHourBoundary) || typeof startHourBoundary === 'undefined') {
                startHourBoundary = startHourBoundaryDefault;
            }
            //hass.callService('system_log', 'write', {level:'warning',message:'startHourBoundary: ' + startHourBoundary});
            if (isNaN(endHourBoundary) || typeof endHourBoundary === 'undefined') {
                endHourBoundary = endHourBoundaryDefault;
            }
            //hass.callService('system_log', 'write', {level:'warning',message:'endHourBoundary: ' + endHourBoundary});
            //hass.callService('system_log', 'write', {level:'warning',message:'currentHours: ' + currentHours});
            if (currentHours >= startHourBoundary && currentHours < endHourBoundary) {
              returnValue = true;
            }
          }

          return returnValue;
        ]]]
      icon: "[[[return variables?.var_kepath_device_entity_and_style_binary_count_state?.style2?.icon;]]]"
      styles:
        icon:
          - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style2?.icon_color}),1)`; ]]]"
        img_cell:
          - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style2?.background_color}),0.2)`; ]]]"
