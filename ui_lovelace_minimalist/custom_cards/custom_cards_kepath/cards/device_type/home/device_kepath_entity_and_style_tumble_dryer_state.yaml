---
device_kepath_entity_and_style_tumble_dryer_state:
  variables:
    var_kepath_device_entity_and_style_binary_count_state:
      entity:
        evaluated_entity: "sensor.samsung_tumble_dryer_dryer_machine_state"
        completion_entity: "sensor.samsung_tumble_dryer_dryer_completion_time"
      style:
        use_themes: true
        icon: "mdi:tumble-dryer"
        icon_color: "green"
        background_color: "green"
    var_kepath_generic_get_set_group_button_objects:
      error_state:
        icon: "mdi:tumble-dryer-alert"
        icon_color: "red"
        background_color: "red"

  state:
    - operator: "template"
      value: >
        [[[
          var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;

          var resolvedState;
          var returnValue = false;

          resolvedState = states[evaluatedStateEntity].state.toLowerCase();
          if (typeof resolvedState !== 'undefined') {
            if (resolvedState == 'run') {
              returnValue = true;
            }
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedBatteryState: ' + resolvedBatteryState});

          return returnValue;
        ]]]
      icon: >
        [[[
          var evaluatedCompletionEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.completion_entity;
          var returnedIcon = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;

          var resolvedCompletionState = states[evaluatedCompletionEntity].state;

          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedCompletionState: ' + resolvedCompletionState});

          if (typeof resolvedCompletionState !== 'undefined') {
            //hass.callService('system_log', 'write', {level:'warning',message:'1: '});
            var resolvedCompletionDate = new Date(resolvedCompletionState);
            if (Object.prototype.toString.call(resolvedCompletionDate) === "[object Date]") {
              //hass.callService('system_log', 'write', {level:'warning',message:'2: '});
              if (!isNaN(resolvedCompletionDate)) {
                //hass.callService('system_log', 'write', {level:'warning',message:'3: '});
                var completionMilliseconds = Date.parse(resolvedCompletionDate) - Date.now();
                if(!isNaN(parseInt(completionMilliseconds))) {
                  //hass.callService('system_log', 'write', {level:'warning',message:'4: '});
                  var completionHours = (completionMilliseconds / (1000 * 60 * 60)).toFixed();
                  if(!isNaN(parseInt(completionHours))) {
                    //hass.callService('system_log', 'write', {level:'warning',message:'5: '});
                    returnedIcon = "mdi:numeric-" + completionHours + "-circle-outline";
                  }
                }
              }
            }
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'returnedIcon: ' + returnedIcon});

          return returnedIcon;
        ]]]
      styles:
        icon:
          - color: >
              [[[
                return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color}),1)`;
              ]]]
        img_cell:
          - background-color: >
              [[[
                return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color}),0.2)`;
              ]]]
    - operator: "template"
      value: >
        [[[
          var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;

          var resolvedState;
          var returnValue = false;

          resolvedState = states[evaluatedStateEntity].state.toLowerCase();
          if (typeof resolvedState !== 'undefined') {
            if (resolvedState == 'paused' || resolvedState == 'unknown' || resolvedState == 'unavailable') {
              returnValue = true;
            }
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedBatteryState: ' + resolvedBatteryState});

          return returnValue;
        ]]]
      icon: >
        [[[
          var returnedIcon = variables?.var_kepath_generic_get_set_group_button_objects?.error_state?.icon;

          return returnedIcon;
        ]]]
      styles:
        icon:
          - color: >
              [[[
                return `rgba(var(--color-${variables?.var_kepath_generic_get_set_group_button_objects?.error_state?.icon_color}),1)`;
              ]]]
        img_cell:
          - background-color: >
              [[[
                return `rgba(var(--color-${variables?.var_kepath_generic_get_set_group_button_objects?.error_state?.background_color}),0.2)`;
              ]]]
