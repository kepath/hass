---
device_kepath_entity_and_style_occupancy_state:
  variables:
    var_kepath_device_entity_and_style_binary_count_state:
      entity:
        evaluated_entity: "sensor.binary_sensor_state_counts"
        evaluated_attribute: "occupancy_sensors_triggered_count"
        person_count_attribute: "occupancy_persons_home_count"
      style:
        use_themes: true
        icon: "mdi:human-greeting"
        icon_color: "blue"
        background_color: "blue"
      style2:
        use_themes: true
        icon: "mdi:motion-sensor"
        icon_color: "red"
        background_color: "red"

  state:
    - operator: "template"
      value: >
        [[[
          var evaluatedEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedOccupancyAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;
          var evaluatedPersonAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.person_count_attribute;
          var returnValue = false;

          var resolvedOccupancyStateDefault = 0;
          var resolvedOccupancyState;
          resolvedOccupancyState = states[evaluatedEntity].attributes[evaluatedOccupancyAttribute];
          if (isNaN(resolvedOccupancyState) || typeof resolvedOccupancyState === 'undefined') {
              resolvedOccupancyState = resolvedOccupancyStateDefault;
          }

          var resolvedPersonStateDefault = 0;
          var resolvedPersonState;
          resolvedPersonState = states[evaluatedEntity].attributes[evaluatedPersonAttribute];
          if (isNaN(resolvedPersonState) || typeof resolvedPersonState === 'undefined') {
              resolvedPersonState = resolvedPersonStateDefault;
          }

          if (resolvedPersonState > 0 && resolvedOccupancyState > 0) {
            returnValue = true;
          }

          return returnValue;
        ]]]
      icon: "[[[return variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;]]]"
      styles:
        icon:
          - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color}),1)`; ]]]"
        img_cell:
          - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color}),0.2)`; ]]]"
    - operator: "template"
      value: >
        [[[
          var evaluatedEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedOccupancyAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;
          var evaluatedPersonAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.person_count_attribute;
          var returnValue = false;

          var resolvedOccupancyStateDefault = 0;
          var resolvedOccupancyState;
          resolvedOccupancyState = states[evaluatedEntity].attributes[evaluatedOccupancyAttribute];
          if (isNaN(resolvedOccupancyState) || typeof resolvedOccupancyState === 'undefined') {
              resolvedOccupancyState = resolvedOccupancyStateDefault;
          }

          var resolvedPersonStateDefault = 0;
          var resolvedPersonState;
          resolvedPersonState = states[evaluatedEntity].attributes[evaluatedPersonAttribute];
          if (isNaN(resolvedPersonState) || typeof resolvedPersonState === 'undefined') {
              resolvedPersonState = resolvedPersonStateDefault;
          }

          if (resolvedPersonState == 0 && resolvedOccupancyState > 0) {
            returnValue = true;
          }

          return returnValue;
        ]]]
      icon: "[[[return variables?.var_kepath_device_entity_and_style_binary_count_state?.style2?.icon;]]]"
      styles:
        icon:
          - color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style2?.icon_color}),1)`; ]]]"
        img_cell:
          - background-color: "[[[ return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style2?.background_color}),0.2)`; ]]]"
