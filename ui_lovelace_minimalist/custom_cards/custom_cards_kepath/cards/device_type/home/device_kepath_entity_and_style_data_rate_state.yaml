---
device_kepath_entity_and_style_data_rate_state:
  variables:
    var_kepath_device_entity_and_style_binary_count_state:
      entity:
        evaluated_entity: "sensor.binary_sensor_state_counts"
        isattribute: true
        evaluated_attribute: "data_rate_total_value_10_times_smaller"
      style:
        use_themes: true
        icon: "mdi:numeric-off"
        icon_color: "blue"
        background_color: "blue"

  # template:
  #   - "javascript_function_if_variable_undefined_use_default"
  state:
    - operator: "template"
      value: >
        [[[
          var evaluatedDataValueEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedDataValueAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

          var resolvedDataValueStateDefault = 0;
          var resolvedDataValueState;
          var returnValue = false;

          resolvedDataValueState = states[evaluatedDataValueEntity].attributes[evaluatedDataValueAttribute];
          if (isNaN(resolvedDataValueState) || typeof resolvedDataValueState === 'undefined') {
              resolvedDataValueState = resolvedDataValueStateDefault;
          }
          if (resolvedDataValueState > 0) {
            returnValue = true;
          }

          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedDataValueState: ' + resolvedDataValueState});

          return returnValue;
        ]]]
      icon: >
        [[[
          var returnedIcon = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;
          var evaluatedDataValueEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedDataValueAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

          var resolvedDataValueState;

          resolvedDataValueState = states[evaluatedDataValueEntity].attributes[evaluatedDataValueAttribute];
          if (!isNaN(resolvedDataValueState) && typeof resolvedDataValueState !== 'undefined') {
            returnedIcon = "mdi:numeric-0";
            if (resolvedDataValueState > 9) {
              resolvedDataValueState = "9-plus";
            }
            returnedIcon = returnedIcon.replace("0",resolvedDataValueState);
          }

          return returnedIcon;
        ]]]
      styles:
        icon:
          - width: "150%"
          - height: "150%"
          - color: >
              [[[
                var returnedColor = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color;
                var evaluatedDataValueEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
                var evaluatedDataValueAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

                var resolvedDataValueState;

                resolvedDataValueState = states[evaluatedDataValueEntity].attributes[evaluatedDataValueAttribute];
                if (!isNaN(resolvedDataValueState) && typeof resolvedDataValueState !== 'undefined') {
                  switch(resolvedDataValueState) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                      returnedColor = "green";
                      break;
                    case 4:
                    case 5:
                    case 6:
                      returnedColor = "yellow";
                      break;
                    case 7:
                    case 8:
                    case 9:
                    default:
                      returnedColor = "red";
                      break;
                  }
                }
                //return returnedColor;
                return `rgba(var(--color-${returnedColor}),1)`;
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedColor = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color;
                var evaluatedDataValueEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
                var evaluatedDataValueAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

                var resolvedDataValueState;

                resolvedDataValueState = states[evaluatedDataValueEntity].attributes[evaluatedDataValueAttribute];
                if (!isNaN(resolvedDataValueState) && typeof resolvedDataValueState !== 'undefined') {
                  switch(resolvedDataValueState) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                      returnedColor = "green";
                      break;
                    case 4:
                    case 5:
                    case 6:
                      returnedColor = "yellow";
                      break;
                    case 7:
                    case 8:
                    case 9:
                    default:
                      returnedColor = "red";
                      break;
                  }
                }
                //return returnedColor;
                return `rgba(var(--color-${returnedColor}),0.2)`;
              ]]]
