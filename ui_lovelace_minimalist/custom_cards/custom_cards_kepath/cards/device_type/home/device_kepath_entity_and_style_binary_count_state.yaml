---
device_kepath_entity_and_style_binary_count_state:
  # variables:
  #   var_kepath_device_entity_and_style_binary_count_state:
  #     entity:
  #       evaluated_entity: "sensor.binary_sensor_state_counts"
  #       isattribute: true
  #       evaluated_attribute: "zero_value"
  #     value:
  #       math_expresion_used: "gt"
  #       trigger_value: 0
  #     style:
  #       use_themes: true
  #       icon: "mdi:checkbox-blank-circle-outline"
  #       icon_color: "green"
  #       background_color: "green"
  state:
    - operator: "template"
      value: >
        [[[
          var evaluatedEntityDefault = "sensor.binary_sensor_state_counts";
          var evaluatedEntity;
          var isAttributeDefault = true;
          var isAttribute;
          var evaluatedAttributeDefault = "zero_value";
          var evaluatedAttribute;
          var mathExpressionDefault = "gt";
          var mathExpression;
          var triggerValueDefault = 0;
          var triggerValue;

          const mathExpressionList = ['eq', 'lt', 'gt', 'ne'];
          var resolvedState;
          var isValidExpression = false;
          var returnValue = false;

          if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity !== 'undefined') {
            evaluatedEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          } else {
            evaluatedEntity = evaluatedEntityDefault;
          }
          if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.isattribute !== 'undefined') {
            if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.isattribute === 'boolean') {
              isAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.isattribute;
            } else {
              isAttribute = isAttributeDefault;
            }
          } else {
            isAttribute = isAttributeDefault;
          }
          if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute !== 'undefined') {
            evaluatedAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;
          } else {
            evaluatedAttribute = evaluatedAttributeDefault;
          }

          if (isAttribute) {
            resolvedState = states[evaluatedEntity].attributes[evaluatedAttribute];
          } else {
            resolvedState = states[evaluatedEntity].state;
          }

          if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.math_expresion_used !== 'undefined') {
            mathExpression = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.math_expresion_used;
          } else {
            mathExpression = mathExpressionDefault;
          }
          for (let i = 0; i < mathExpressionList.length; i++) {
            if (mathExpression.includes(mathExpressionList[i])){
              isValidExpression = true;
            }
          }
          if (!isValidExpression) {
            mathExpression = mathExpressionDefault;
          }
          if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.trigger_value !== 'undefined') {
            triggerValue = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.trigger_value;
          } else {
            triggerValue = triggerValueDefault;
          }
          if (!isNaN(resolvedState) && !isNaN(triggerValue)) {
            switch(mathExpression) {
              case "eq":
                if (resolvedState == triggerValue) {
                  returnValue = true;
                }
                //hass.callService('system_log', 'write', {level:'warning',message:'switch mathExpression: eq'});
                break;
              case "lt":
                if (resolvedState < triggerValue) {
                  returnValue = true;
                }
                //hass.callService('system_log', 'write', {level:'warning',message:'switch mathExpression: lt'});
                break;
              case "gt":
                if (resolvedState > triggerValue) {
                  returnValue = true;
                }
                //hass.callService('system_log', 'write', {level:'warning',message:'switch mathExpression: gt'});
                break;
              case "ne":
                if (resolvedState != triggerValue) {
                  returnValue = true;
                }
                //hass.callService('system_log', 'write', {level:'warning',message:'switch mathExpression: ne'});
                break;
              default:
                //hass.callService('system_log', 'write', {level:'warning',message:'switch mathExpression: default'});
                returnValue = false;
                break;
            }
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'evaluatedEntity: ' + evaluatedEntity});
          //hass.callService('system_log', 'write', {level:'warning',message:'evaluatedAttribute: ' + evaluatedAttribute});
          //hass.callService('system_log', 'write', {level:'warning',message:'mathExpression: ' + mathExpression});
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedState: ' + resolvedState});
          //hass.callService('system_log', 'write', {level:'warning',message:'triggerValue: ' + triggerValue});
          //hass.callService('system_log', 'write', {level:'warning',message:'returnValue: ' + returnValue});

          return returnValue;
        ]]]
      icon: >
        [[[
          var backupIcon =  "mdi:checkbox-blank-circle-outline";
          var returnedIcon;
          if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon !== 'undefined') {
            if (variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon.includes('mdi:')) {
              returnedIcon = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;
            }
          }
          if (typeof returnedIcon !== 'undefined') {
            //hass.callService('system_log', 'write', {level:'warning',message:'returnedIcon: ' + returnedIcon});
            return returnedIcon;
          } else {
            return backupIcon;
          }
        ]]]
      styles:
        icon:
          - color: >
              [[[
                var returnedColorDefault = "green";
                var returnedColor;
                var useThemesDefault = true;
                var useThemes;
                const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
                if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.use_themes !== 'undefined') {
                  if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.use_themes === 'boolean') {
                    useThemes = variables?.var_kepath_device_entity_and_style_binary_count_state?.use_themes;
                  } else {
                    useThemes = useThemesDefault;
                  }
                } else {
                  useThemes = useThemesDefault;
                }
                if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color !== 'undefined') {
                  returnedColor = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color;
                } else {
                  returnedColor = returnedColorDefault;
                }
                if (useThemes) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (returnedColor.includes(colorOptions[i])){
                      returnedColor = "rgba(var(--color-" + returnedColor + "), 1)";
                    }
                  }
                }
                //hass.callService('system_log', 'write', {level:'warning',message:'returnedColor: ' + returnedColor});

                return returnedColor;
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedColorDefault = "green";
                var returnedColor;
                var useThemesDefault = true;
                var useThemes;
                const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
                if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.use_themes !== 'undefined') {
                  if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.use_themes === 'boolean') {
                    useThemes = variables?.var_kepath_device_entity_and_style_binary_count_state?.use_themes;
                  } else {
                    useThemes = useThemesDefault;
                  }
                } else {
                  useThemes = useThemesDefault;
                }
                if (typeof variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color !== 'undefined') {
                  returnedColor = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color;
                } else {
                  returnedColor = returnedColorDefault;
                }
                if (useThemes) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (returnedColor.includes(colorOptions[i])){
                      returnedColor = "rgba(var(--color-" + returnedColor + "), 0.2)";
                    }
                  }
                }
                //hass.callService('system_log', 'write', {level:'warning',message:'returnedColor: ' + returnedColor});

                return returnedColor;
              ]]]
