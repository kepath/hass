---
device_kepath_entity_and_style_dishwasher_state:
  variables:
    var_kepath_device_entity_and_style_binary_count_state:
      data_entities:
        # evaluated_entity: "sensor.dishwasher_operation_state"
        progress_entity: "sensor.dishwasher_remaining_program_time"
      style:
        use_themes: true
        icon: "mdi:dishwasher"
        icon_color: "green"
        background_color: "green"

  state:
    - value: "on"
    # - operator: "template"
    #   value: >
    #     [[[
    #       var evaluatedStateEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.data_entities?.evaluated_entity;

    #       var resolvedState;
    #       var returnValue = false;

    #       resolvedState = states[evaluatedStateEntity].state.toLowerCase();
    #       if (typeof resolvedState !== 'undefined') {
    #         if (resolvedState == 'run' || resolvedState == 'finished') {
    #           returnValue = true;
    #         }
    #       }
    #       //hass.callService('system_log', 'write', {level:'warning',message:'resolvedBatteryState: ' + resolvedBatteryState});

    #       return returnValue;
    #     ]]]
      icon: >
        [[[
          var evaluatedProgressEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.data_entities?.progress_entity;
          var returnedIcon = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;

          var resolvedProgressState;
          resolvedProgressState = states[evaluatedProgressEntity].state;
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedProgressState: ' + resolvedProgressState});


          //if (!isNaN(resolvedProgressState) && typeof resolvedProgressState !== 'undefined') {
          if (typeof resolvedProgressState !== 'undefined') {
            //hass.callService('system_log', 'write', {level:'warning',message:'1: '});
            if (!isNaN(Date.parse(resolvedProgressState))) {
              //hass.callService('system_log', 'write', {level:'warning',message:'2: '});
              var progressMilliseconds = Date.parse(resolvedProgressState) - Date.now();
              if(!isNaN(parseInt(progressMilliseconds))) {
                //hass.callService('system_log', 'write', {level:'warning',message:'3: '});
                var progressHours = parseInt((progressMilliseconds / (1000 * 60 * 60)).toFixed());
                if(!isNaN(parseInt(progressHours))) {
                  //hass.callService('system_log', 'write', {level:'warning',message:'4: '});
                  if (progressHours >= 0 && progressHours <= 9 ) {
                    //hass.callService('system_log', 'write', {level:'warning',message:'5: '});
                    returnedIcon = "mdi:numeric-" + progressHours + "-circle-outline";
                  }
                }
            }
            }
          }

          //hass.callService('system_log', 'write', {level:'warning',message:'returnedIcon: ' + returnedIcon});
          return returnedIcon;
        ]]]
      styles:
        icon:
          - color: >
              [[[
                return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color}),1)`;
              ]]]
        img_cell:
          - background-color: >
              [[[
                return `rgba(var(--color-${variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color}),0.2)`;
              ]]]
