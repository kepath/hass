---
custom_card_kepath_generic_button_icon_styles:
  icon: >
    [[[
      var backupIcon = "mdi:close-circle";
      var returnedIcon;
      if (typeof variables?.var_kepath_generic_button_icon_styles?.error_state?.icon !== 'undefined') {
        if (variables?.var_kepath_generic_button_icon_styles?.error_state?.icon.includes('mdi:') ||
            variables?.var_kepath_generic_button_icon_styles?.error_state?.icon.includes('phu:') ||
            variables?.var_kepath_generic_button_icon_styles?.error_state?.icon.includes('si:')) {
          returnedIcon = variables?.var_kepath_generic_button_icon_styles?.error_state?.icon;
        }
      }
      if (typeof returnedIcon !== 'undefined') {
        return returnedIcon;
      } else {
        return backupIcon;
      }
    ]]]
  styles:
    icon:
      - color: >
          [[[
            var returnedColorDefault = "red";
            var returnedColor;
            var useThemesDefault = true;
            var useThemes;
            const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
            if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes !== 'undefined') {
              if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes === 'boolean') {
                useThemes = variables?.var_kepath_generic_button_icon_styles?.use_themes;
              } else {
                useThemes = useThemesDefault;
              }
            } else {
              useThemes = useThemesDefault;
            }
            if (typeof variables?.var_kepath_generic_button_icon_styles?.error_state?.icon_color !== 'undefined') {
              returnedColor = variables?.var_kepath_generic_button_icon_styles?.error_state?.icon_color;
            } else {
              returnedColor = returnedColorDefault;
            }
            if (useThemes) {
              for (let i = 0; i < colorOptions.length; i++) {
                if (returnedColor.includes(colorOptions[i])){
                  returnedColor = "rgba(var(--color-" + returnedColor + "), 1)";
                }
              }
            }

            return returnedColor;
          ]]]
    img_cell:
      - background-color: >
          [[[
            var returnedColorDefault = "red";
            var returnedColor;
            var useThemesDefault = true;
            var useThemes;
            const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
            if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes !== 'undefined') {
              if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes === 'boolean') {
                useThemes = variables?.var_kepath_generic_button_icon_styles?.use_themes;
              } else {
                useThemes = useThemesDefault;
              }
            } else {
              useThemes = useThemesDefault;
            }
            if (typeof variables?.var_kepath_generic_button_icon_styles?.error_state?.background_color !== 'undefined') {
              returnedColor = variables?.var_kepath_generic_button_icon_styles?.error_state?.background_color;
            } else {
              returnedColor = returnedColorDefault;
            }
            if (useThemes) {
              for (let i = 0; i < colorOptions.length; i++) {
                if (returnedColor.includes(colorOptions[i])){
                  returnedColor = "rgba(var(--color-" + returnedColor + "), 0.2)";
                }
              }
            }

            return returnedColor;
          ]]]
  state:
    - operator: "default"
      icon: >
        [[[
          var backupIcon =  "mdi:checkbox-blank-circle-outline";
          var returnedIcon;
          if (typeof variables?.var_kepath_generic_button_icon_styles?.default_state?.icon !== 'undefined') {
            if (variables?.var_kepath_generic_button_icon_styles?.default_state?.icon.includes('mdi:') ||
                variables?.var_kepath_generic_button_icon_styles?.default_state?.icon.includes('phu:') ||
                variables?.var_kepath_generic_button_icon_styles?.default_state?.icon.includes('si:')) {
              returnedIcon = variables?.var_kepath_generic_button_icon_styles?.default_state?.icon;
            }
          }
          if (typeof returnedIcon !== 'undefined') {
            //hass.callService('system_log', 'write', {level:'warning',message:'returnedIcon: ' + returnedIcon});
            return returnedIcon;
          } else {
            return backupIcon;
          }
        ]]]
      styles:
        icon:
          - color: >
              [[[
                var returnedColorDefault = "yellow";
                var returnedColor;
                var useThemesDefault = true;
                var useThemes;
                const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
                if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes !== 'undefined') {
                  if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes === 'boolean') {
                    useThemes = variables?.var_kepath_generic_button_icon_styles?.use_themes;
                  } else {
                    useThemes = useThemesDefault;
                  }
                } else {
                  useThemes = useThemesDefault;
                }
                if (typeof variables?.var_kepath_generic_button_icon_styles?.default_state?.icon_color !== 'undefined') {
                  returnedColor = variables?.var_kepath_generic_button_icon_styles?.default_state?.icon_color;
                } else {
                  returnedColor = returnedColorDefault;
                }
                if (useThemes) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (returnedColor.includes(colorOptions[i])){
                      returnedColor = "rgba(var(--color-" + returnedColor + "), 1)";
                    }
                  }
                }
                //hass.callService('system_log', 'write', {level:'warning',message:'returnedColor: ' + returnedColor});

                return returnedColor;
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedColorDefault = "yellow";
                var returnedColor;
                var useThemesDefault = true;
                var useThemes;
                const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
                if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes !== 'undefined') {
                  if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes === 'boolean') {
                    useThemes = variables?.var_kepath_generic_button_icon_styles?.use_themes;
                  } else {
                    useThemes = useThemesDefault;
                  }
                } else {
                  useThemes = useThemesDefault;
                }
                if (typeof variables?.var_kepath_generic_button_icon_styles?.default_state?.background_color !== 'undefined') {
                  returnedColor = variables?.var_kepath_generic_button_icon_styles?.default_state?.background_color;
                } else {
                  returnedColor = returnedColorDefault;
                }
                if (useThemes) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (returnedColor.includes(colorOptions[i])){
                      returnedColor = "rgba(var(--color-" + returnedColor + "), 0.2)";
                    }
                  }
                }
                //hass.callService('system_log', 'write', {level:'warning',message:'returnedColor: ' + returnedColor});

                return returnedColor;
              ]]]
    - operator: "template"
      value: >
        [[[
          var returnValue = false;
          var useUnknownStateDefault = false;
          var useUnknownState;
          if (typeof variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.use_unknown_state !== 'undefined') {
            if (typeof variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.use_unknown_state === 'boolean') {
              useUnknownState = variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.use_unknown_state;
            } else {
              useUnknownState = useUnknownStateDefault;
            }
          } else {
            useUnknownState = useUnknownStateDefault;
          }
          if (typeof entity?.state !== "undefined") {
            if (entity?.state == "unavailable" || entity?.state == "unknown") {
              if (useUnknownState) {
                returnValue = true;
              }
            }
          }

          return returnValue;
        ]]]
      icon: >
        [[[
          var backupIcon = "mdi:radiobox-marked";
          var returnedIcon;
          if (typeof variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.icon !== 'undefined') {
            if (variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.icon.includes('mdi:') ||
                variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.icon.includes('phu:') ||
                variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.icon.includes('si:')) {
              returnedIcon = variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.icon;
            }
          }
          if (typeof returnedIcon !== 'undefined') {
            return returnedIcon;
          } else {
            return backupIcon;
          }
        ]]]
      styles:
        icon:
          - color: >
              [[[
                var returnedColorDefault = "red";
                var returnedColor;
                var useThemesDefault = true;
                var useThemes;
                const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
                if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes !== 'undefined') {
                  if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes === 'boolean') {
                    useThemes = variables?.var_kepath_generic_button_icon_styles?.use_themes;
                  } else {
                    useThemes = useThemesDefault;
                  }
                } else {
                  useThemes = useThemesDefault;
                }
                if (typeof variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.icon_color !== 'undefined') {
                  returnedColor = variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.icon_color;
                } else {
                  returnedColor = returnedColorDefault;
                }
                if (useThemes) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (returnedColor.includes(colorOptions[i])){
                      returnedColor = "rgba(var(--color-" + returnedColor + "), 1)";
                    }
                  }
                }

                return returnedColor;
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedColorDefault = "red";
                var returnedColor;
                var useThemesDefault = true;
                var useThemes;
                const colorOptions = ['grey', 'red', 'green', 'yellow', 'blue', 'purple', 'pink', 'amber', 'theme'];
                if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes !== 'undefined') {
                  if (typeof variables?.var_kepath_generic_button_icon_styles?.use_themes === 'boolean') {
                    useThemes = variables?.var_kepath_generic_button_icon_styles?.use_themes;
                  } else {
                    useThemes = useThemesDefault;
                  }
                } else {
                  useThemes = useThemesDefault;
                }
                if (typeof variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.background_color !== 'undefined') {
                  returnedColor = variables?.var_kepath_generic_button_icon_styles?.unkwown_state?.background_color;
                } else {
                  returnedColor = returnedColorDefault;
                }
                if (useThemes) {
                  for (let i = 0; i < colorOptions.length; i++) {
                    if (returnedColor.includes(colorOptions[i])){
                      returnedColor = "rgba(var(--color-" + returnedColor + "), 0.2)";
                    }
                  }
                }

                return returnedColor;
              ]]]
