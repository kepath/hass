---
custom_card_kepath_binary_notifications_device_style:
  styles:
    custom_fields:
      unavailable:
        - position: "absolute"
        - left: "65%"
        - top: "6px"
        - width: "20px"
        - height: "20px"
      amount:
        - position: "absolute"
        - left: "65%"
        - top: "38px"
        - width: "20px"
        - height: "20px"

custom_card_kepath_binary_notifications_floorplan_style:
  styles:
    custom_fields:
      unavailable:
        - position: "absolute"
        - left: "81%"
        - top: "5px"
        - width: "14px"
        - height: "14px"
      amount:
        - position: "absolute"
        - left: "15px"
        - top: "5px"
        - width: "14px"
        - height: "14px"

custom_card_kepath_binary_notifications_tab_style:
  styles:
    custom_fields:
      unavailable:
        - position: "absolute"
        - left: "[[[ return (!hass.themes.darkMode && states[entity.entity_id]?.state == 'off') ? '60%' : '64%' ]]]"
        - top: "[[[ return (!hass.themes.darkMode && states[entity.entity_id]?.state == 'off')  ? '10px' : '8px' ]]]"
        - width: "[[[ return (!hass.themes.darkMode && states[entity.entity_id]?.state == 'off')  ? '20px' : '14px' ]]]"
        - height: "[[[ return (!hass.themes.darkMode && states[entity.entity_id]?.state == 'off')  ? '20px' : '14px' ]]]"
      amount:
        - position: "absolute"
        - left: "[[[ return (!hass.themes.darkMode && states[entity.entity_id]?.state == 'off')  ? '60%' : '64%' ]]]"
        - top: "[[[ return (!hass.themes.darkMode && states[entity.entity_id]?.state == 'off')  ? '42px' : '38px' ]]]"
        - width: "[[[ return (!hass.themes.darkMode && states[entity.entity_id]?.state == 'off')  ? '20px' : '14px' ]]]"
        - height: "[[[ return (!hass.themes.darkMode && states[entity.entity_id]?.state == 'off')  ? '20px' : '14px' ]]]"

custom_card_kepath_binary_notifications_common_styles:
  variables:
    var_kepath_constant_position_overrides:
      evaluated_position_entity: >
        [[[
          var entity = entity?.entity_id;
          if (variables?.var_kepath_constant_position_overrides?.evaluated_position_entity) {
            entity = variables.var_kepath_constant_position_overrides.evaluated_position_entity;
          }
          return entity;
        ]]]
      is_compact_mode: >
        [[[
          var isCompactMode = false;
          if (variables?.var_kepath_constant_position_overrides) {
            if (variables?.var_kepath_constant_position_overrides?.is_compact_mode) {
              if (typeof variables.var_kepath_constant_position_overrides.is_compact_mode === "boolean") {
                isCompactMode = variables.var_kepath_constant_position_overrides.is_compact_mode;
              }
            }
          }
          return isCompactMode;
        ]]]
      off_state_only: >
        [[[
          var offStateOnly = false;
          if (variables?.var_kepath_constant_position_overrides) {
            if (variables?.var_kepath_constant_position_overrides?.off_state_only) {
              if (typeof variables?.var_kepath_constant_position_overrides?.off_state_only === "boolean") {
                offStateOnly = variables?.var_kepath_constant_position_overrides?.off_state_only;
              }
            }
          }
          return offStateOnly;
        ]]]
    var_kepath_generic_get_set_group_notification_objects:
      unavailable:
        entity: "sensor.binary_sensor_state_counts"
        is_attribute: >
          [[[
            var isValueAttribute = true;
            if (variables?.var_kepath_generic_get_set_group_notification_objects?.unavailable?.is_attribute) {
              if (typeof variables.var_kepath_generic_get_set_group_notification_objects.unavailable.is_attribute === "boolean") {
                isValueAttribute = variables.var_kepath_generic_get_set_group_notification_objects.unavailable.is_attribute;
              }
            }
            return isValueAttribute;
          ]]]
        attribute_name: "zero_value"
        count_tooltip: ""
        substitute_icon: ""
      amount:
        entity: "sensor.binary_sensor_state_counts"
        is_attribute: >
          [[[
            var isValueAttribute = true;
            if (variables?.var_kepath_generic_get_set_group_notification_objects?.amount?.is_attribute) {
              if (typeof variables.var_kepath_generic_get_set_group_notification_objects.amount.is_attribute === "boolean") {
                isValueAttribute = variables.var_kepath_generic_get_set_group_notification_objects.amount.is_attribute;
              }
            }
            return isValueAttribute;
          ]]]
        attribute_name: "zero_value"
        count_tooltip: ""
        substitute_icon: ""
  styles:
    custom_fields:
      notification:
        - visibility: "hidden"
  custom_fields:
    unavailable:
      card:
        type: "custom:button-card"
        template: >
          [[[
            let styleTemplate = [ "widget_count_mdi_number_indicator" ];
            var extraTemplate = "widget_count_mdi_number_indicator_default_style"
            if (variables?.var_kepath_constant_position_overrides?.is_compact_mode) {
              if (variables?.var_kepath_constant_position_overrides?.off_state_only) {
                if (states[variables?.var_kepath_constant_position_overrides?.evaluated_position_entity]?.state == "off") {
                  extraTemplate = "widget_count_mdi_number_indicator_compact_style"
                }
              } else {
                extraTemplate = "widget_count_mdi_number_indicator_compact_style"
              }
            }
            styleTemplate.push(extraTemplate);

            return styleTemplate;
          ]]]
        tap_action:
          action: "none"
        variables:
          notification_counts: "[[[ return variables?.var_kepath_generic_get_set_group_notification_objects?.unavailable; ]]]"
        entity: "[[[ return variables?.var_kepath_generic_get_set_group_notification_objects?.unavailable?.entity; ]]]"
        styles:
          tooltip:
            - font-weight: "bold"
            - font-size: "10px"
            - margin: "0"
            - border: "0"
            - border-radius: "0"
            - transform: "translate(-75%,-25%)"
    amount:
      card:
        type: "custom:button-card"
        template: >
          [[[
            let styleTemplate = [ "widget_count_mdi_number_indicator" ];
            var extraTemplate = "widget_count_mdi_number_indicator_default_style"
            if (variables?.var_kepath_constant_position_overrides?.is_compact_mode) {
              if (variables?.var_kepath_constant_position_overrides?.off_state_only) {
                if (states[variables?.var_kepath_constant_position_overrides?.evaluated_position_entity]?.state == "off") {
                  extraTemplate = "widget_count_mdi_number_indicator_compact_style"
                }
              } else {
                extraTemplate = "widget_count_mdi_number_indicator_compact_style"
              }
            }
            styleTemplate.push(extraTemplate);

            return styleTemplate;
          ]]]
        tap_action:
          action: "none"
        variables:
          notification_counts: "[[[ return variables?.var_kepath_generic_get_set_group_notification_objects?.amount; ]]]"
        entity: "[[[ return variables?.var_kepath_generic_get_set_group_notification_objects?.amount?.entity; ]]]"
        styles:
          tooltip:
            - font-weight: "bold"
            - font-size: "10px"
            - margin: "0"
            - border: "0"
            - border-radius: "0"
            - transform: "translate(-75%,-75%)"

widget_count_mdi_number_indicator:
  show_icon: true
  show_label: false
  show_name: false
  group_expand: true
  icon: >
    [[[
      var amountValue = 0;
      var icon = "mdi:numeric-0-circle";
      if (variables?.notification_counts?.is_attribute) {
        amountValue = states[variables?.notification_counts?.entity]?.attributes[variables?.notification_counts?.attribute_name] ? states[variables.notification_counts.entity].attributes[variables.notification_counts.attribute_name] : 0;
      } else {
        amountValue = states[variables?.notification_counts?.entity]?.state ? states[variables.notification_counts.entity].state : 0;
      }
      if (!isNaN(amountValue) && amountValue !== undefined){
        if (amountValue > 9) {
          amountValue = "9-plus";
          //mdi:numeric-9-plus
        }
        icon = icon.replace("0",amountValue);
        //mdi:numeric-4-circle
      }
      if (amountValue == "on") {
        icon = "mdi:arrow-up-bold-circle";
      }
      if (variables?.notification_counts?.substitute_icon != "") {
        icon = variables.notification_counts.substitute_icon;
      }
      if(hass.themes.darkMode) {
        icon = icon.replace("-circle","");
        //mdi:arrow-up-bold
        //mdi:numeric-0
      }


      return icon;
    ]]]
  styles:
    icon:
      - width: "14px"
      - height: "14px"
      - line-height: "0"
      - color: >
          [[[
            var iconColor = "rgba(var(--color-red),1)";
            if(hass.themes.darkMode) {
              iconColor = "rgba(var(--color-yellow),1)";
            }
            return iconColor;
          ]]]
  state:
    - operator: "template"
      value: >
        [[[
          var isZeroValue = true;
          var amountValue = 0;
          if (variables?.notification_counts?.is_attribute) {
            amountValue = states[variables?.notification_counts?.entity]?.attributes[variables?.notification_counts?.attribute_name] ? states[variables.notification_counts.entity].attributes[variables.notification_counts.attribute_name] : 0;
          } else {
            amountValue = states[variables?.notification_counts?.entity]?.state ? states[variables.notification_counts.entity].state : 0;
          }
          if (!isNaN(amountValue) && amountValue != 0 && amountValue !== undefined) {
            isZeroValue = false;
          }
          if (amountValue == "on") {
            isZeroValue = false;
          }
          return isZeroValue;
        ]]]
      styles:
        card:
          - display: "none"
  tooltip: >
    [[[
      var tooltipValue = null;
      if(variables?.notification_counts?.count_tooltip) {
        tooltipValue = variables.notification_counts.count_tooltip;
      }
      return tooltipValue;
    ]]]

widget_count_mdi_number_indicator_default_style:
  styles:
    img_cell:
      - border-radius: "50%"
      - background-color: "rgba(var(--color-theme),0)"
      - height: "16px"
      - width: "16px"
      - border: "2px solid rgba(var(--color-theme),0)"
    card:
      - height: "20px"
      - width: "20px"
      - box-shadow: "none"
      - padding: "0"
      - border-radius: "50%"

widget_count_mdi_number_indicator_compact_style:
  styles:
    img_cell:
      - border-radius: "50%"
      - background-color: "rgba(var(--color-theme),0)"
      - height: "14px"
      - width: "14px"
      - border: "0px"
    card:
      - height: "14px"
      - width: "14px"
      - box-shadow: "none"
      - padding: "0"
      - border-radius: "50%"
