---
device_kepath_entity_and_style_signal_strength_state:
  variables:
    var_kepath_device_entity_and_style_binary_count_state:
      entity:
        evaluated_entity: "sensor.binary_sensor_state_counts"
        isattribute: true
        evaluated_attribute: "signal_sensors_average_value"
      style:
        use_themes: true
        icon: "mdi:signal-cellular"
        icon_color: "blue"
        background_color: "blue"

  state:
    - operator: "template"
      value: >
        [[[
          var evaluatedSignalEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedSignalAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

          var resolvedSignalState;
          var returnValue = false;

          resolvedSignalState = states[evaluatedSignalEntity].attributes[evaluatedSignalAttribute];
          if (typeof resolvedSignalState !== 'undefined') {
              returnValue = true;
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedSignalState: ' + resolvedSignalState});

          return returnValue;
        ]]]
      icon: >
        [[[
          var returnedIcon = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;
          var iconSuffix = "-outline";
          var evaluatedSignalEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedSignalAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

          var resolvedSignalState;

          resolvedSignalState = states[evaluatedSignalEntity].attributes[evaluatedSignalAttribute];
          if (!isNaN(resolvedSignalState) && typeof resolvedSignalState !== 'undefined') {
            switch(true) {
              case resolvedSignalState > -60:
                iconSuffix = "-3";
                break;
              case resolvedSignalState > -67:
                iconSuffix = "-2";
                break;
              case resolvedSignalState > -80:
                iconSuffix = "-1";
                break;
              default:
                break;
            }
            //returnedIcon = returnedIcon + iconSuffix;
          }

          return returnedIcon + iconSuffix;;
        ]]]
      styles:
        icon:
          - color: >
              [[[
                var returnedColor = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color;
                var evaluatedSignalEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
                var evaluatedSignalAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

                var resolvedSignalState;

                resolvedSignalState = states[evaluatedSignalEntity].attributes[evaluatedSignalAttribute];
                if (!isNaN(resolvedSignalState) && typeof resolvedSignalState !== 'undefined') {
                  switch(true) {
                    case resolvedSignalState > -60:
                      returnedColor = "green";
                      break;
                    case resolvedSignalState > -67:
                      returnedColor = "yellow";
                      break;
                    case resolvedSignalState > -80:
                      returnedColor = "red";
                      break;
                    default:
                      break;
                  }
                }

                return `rgba(var(--color-${returnedColor}),1)`;
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedColor = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color;
                var evaluatedSignalEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
                var evaluatedSignalAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

                var resolvedSignalState;

                resolvedSignalState = states[evaluatedSignalEntity].attributes[evaluatedSignalAttribute];
                if (!isNaN(resolvedSignalState) && typeof resolvedSignalState !== 'undefined') {
                  switch(true) {
                    case resolvedSignalState > -60:
                      returnedColor = "green";
                      break;
                    case resolvedSignalState > -67:
                      returnedColor = "yellow";
                      break;
                    case resolvedSignalState > -80:
                      returnedColor = "red";
                      break;
                    default:
                      break;
                  }
                }

                return `rgba(var(--color-${returnedColor}),0.2)`;
              ]]]
