---
device_kepath_entity_and_style_battery_state:
  variables:
    var_kepath_device_entity_and_style_binary_count_state:
      entity:
        evaluated_entity: "sensor.binary_sensor_state_counts"
        isattribute: true
        evaluated_attribute: "batteries_average_value"
      style:
        use_themes: true
        icon: "mdi:battery-alert"
        icon_color: "red"
        background_color: "red"

  template:
    - "ulm_gradient_green_yellow_red_battery_10step"
  state:
    - operator: "template"
      value: >
        [[[
          var evaluatedBatteryEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedBatteryAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

          var resolvedBatteryState;
          var returnValue = false;

          resolvedBatteryState = states[evaluatedBatteryEntity].attributes[evaluatedBatteryAttribute];
          if (typeof resolvedBatteryState !== 'undefined') {
              returnValue = true;
          }
          //hass.callService('system_log', 'write', {level:'warning',message:'resolvedBatteryState: ' + resolvedBatteryState});

          return returnValue;
        ]]]
      icon: >
        [[[
          var returnedIcon = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon;
          var iconSuffix;
          var evaluatedBatteryEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
          var evaluatedBatteryAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

          var resolvedBatteryState;

          resolvedBatteryState = states[evaluatedBatteryEntity].attributes[evaluatedBatteryAttribute];
          if (!isNaN(resolvedBatteryState) && typeof resolvedBatteryState !== 'undefined') {
            switch(resolvedBatteryState) {
              case "0":
                iconSuffix = "-outline";
                break;
              case "100":
                iconSuffix = "";
                break;
              default:
                iconSuffix = "-" + resolvedBatteryState;
                break;
            }
            returnedIcon = "mdi:battery" + iconSuffix;
          }

          return returnedIcon;
        ]]]
      styles:
        icon:
          - color: >
              [[[
                var returnedColor = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.icon_color;
                var evaluatedBatteryEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
                var evaluatedBatteryAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

                var gradient = "gradient_";
                var resolvedBatteryState;

                resolvedBatteryState = states[evaluatedBatteryEntity].attributes[evaluatedBatteryAttribute];

                if (!isNaN(resolvedBatteryState) && typeof resolvedBatteryState !== 'undefined') {
                  gradient = gradient + resolvedBatteryState;
                  if (variables?.green_yellow_red_battery_10step?.[gradient]) {
                    returnedColor = variables?.green_yellow_red_battery_10step?.[gradient];
                  }
                }

                return "rgba(var(--color-"+returnedColor+"),1)";
              ]]]
        img_cell:
          - background-color: >
              [[[
                var returnedColor = variables?.var_kepath_device_entity_and_style_binary_count_state?.style?.background_color;
                var evaluatedBatteryEntity = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_entity;
                var evaluatedBatteryAttribute = variables?.var_kepath_device_entity_and_style_binary_count_state?.entity?.evaluated_attribute;

                var gradient = "gradient_";
                var resolvedBatteryState;

                resolvedBatteryState = states[evaluatedBatteryEntity].attributes[evaluatedBatteryAttribute];

                if (!isNaN(resolvedBatteryState) && typeof resolvedBatteryState !== 'undefined') {
                  gradient = gradient + resolvedBatteryState;
                  if (variables?.green_yellow_red_battery_10step?.[gradient]) {
                    returnedColor = variables?.green_yellow_red_battery_10step?.[gradient];
                  }
                }

                return "rgba(var(--color-"+returnedColor+"),0.2)";
              ]]]
