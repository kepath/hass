---
template:
  - sensor:
      - unique_id: "binary_sensor_state_counts_template_generated"
        name: "binary_sensor_state_counts"
        state: "{{ expand('group.all_updates')|selectattr('state','eq', 'on')|list|count }}"
        attributes:
          batteries_below20_count: >
            {% set ns = namespace(c = 0) %}
            {% for battery in expand('group.all_battery_class_sensors')-%}
              {%-if is_number(battery.state)-%}
                {%-if battery.state|int < 20%}
                  {% set ns.c = ns.c + 1 %}
                {%-endif-%}
              {%-endif-%}
            {%endfor%}
            {{ ns.c }}
          batteries_unavailable_count: "{{ expand('group.all_battery_class_sensors')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          batteries_average_value: >
            {% set ns = namespace(s = 0,c = 0) %}
            {% for battery in expand('group.all_battery_class_sensors')-%}
              {%-if is_number(battery.state)-%}
                {%- set ns.s = ns.s + battery.state|int -%}
                {%- set ns.c = loop.length -%}
              {%-endif-%}
            {%endfor%}
            {%-if ns.c == 0-%}  # stop divide by zero error
              {%-set ns.c = 1-%}
            {%-endif-%}
            {{ (ns.s / ns.c)|round(-1)|int }}
          cameras_off_count: "{{ expand('group.all_cameras')|rejectattr('state','in', ['recording','idle'])|list|count }}"
          climate_devices_on_count: >
            {{
              [(expand('group.all_climate')|map(attribute='entity_id')|select('is_state_attr', 'hvac_action', 'heating')|list|count),
              (expand('group.all_climate')|rejectattr('attributes.hvac_action', 'defined')|selectattr('state', 'in', ['heat','on'])|list|count),
              (( 0 if (states('sensor.air_to_water_heat_pump_out_water_temperature')|round < 45) else 1) if (has_value('sensor.air_to_water_heat_pump_out_water_temperature')) else 0 )]|sum
            }}
          connectivity_disconnected_count: "{{ expand('group.all_connectivity_class_binary_sensors')|selectattr('state','eq', 'off')|list|count }}"
          connectivity_unavailable_count: "{{ expand('group.all_connectivity_class_binary_sensors')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          data_rate_unavailable_count: "{{ expand('group.all_data_class_sensors')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          data_rate_total_value: "{{expand('group.all_data_rate_class_sensors')|map(attribute='state')|reject('in',['none','unknown','unavailable'])|select('is_number')|map('float')|sum|round()}}"
          device_trackers_away_count: "{{ expand('group.all_device_trackers')|selectattr('state','in', ['away','not_home'])|list|count }}"
          device_trackers_unavailable_count: "{{ expand('group.all_device_trackers')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          door_sensors_triggered_count: "{{ expand('group.all_door_class_binary_sensors')|selectattr('state','eq', 'on')|list|count }}"
          door_sensors_unavailable_count: "{{ expand('group.all_door_class_binary_sensors')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          fans_on_count: "{{ expand('group.all_fans')|selectattr('state','eq', 'on')|list|count }}"
          fans_unavailable_count: "{{ expand('group.all_fans')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          lawn_mower_busy_count: "{{ expand('group.all_lawn_mowers')|selectattr('state','in', ['on','mowing','edgecut'])|list|count }}"
          lawn_mower_error_count: "{{ expand('group.all_lawn_mowers')|rejectattr('state','in', ['on','mowing','edgecut','docked','returning','starting','rain_delay'])|list|count }}"
          lights_on_count: "{{ expand('group.all_lights')|selectattr('state','eq', 'on')|list|count }}"
          locks_unavailable_count: "{{ expand('group.all_locks')|selectattr('state','in', ['unavailable','unknown','jammed'])|list|count }}"
          locks_unlocked_count: "{{ expand('group.all_locks')|selectattr('state','eq', 'unlocked')|list|count }}"
          media_player_audio_on_count: "{{ expand('group.all_audio_class_media_player')|rejectattr('state','in', ['unavailable','unknown','standby','idle','off'])|list|count }}"
          media_player_audio_unavailable_count: "{{ expand('group.all_audio_class_media_player')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          media_player_tv_and_remote_on_count: "{{ expand('group.all_remotes_and_tv_class_media_player')|rejectattr('state','in', ['unavailable','unknown','standby','idle','off'])|list|count }}"
          media_player_tv_and_remote_unavailable_count: "{{ expand('group.all_remotes_and_tv_class_media_player')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          occupancy_persons_home_count: "{{ expand(states.person)|selectattr('state','eq','home')|map(attribute='entity_id')|list|count }}"
          occupancy_sensors_triggered_count: "{{ expand('group.all_occupancy_class_binary_sensors')|selectattr('state','eq', 'on')|list|count }}"
          occupancy_sensors_unavailable_count: "{{ expand('group.all_occupancy_class_binary_sensors')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          plugs_off_count: "{{ expand('group.all_outlet_class_switch')|selectattr('state','eq', 'off')|list|count }}"
          running_stopped_count: "{{ expand('group.all_running_class_binary_sensors')|selectattr('state','eq', 'off')|list|count }}"
          running_unavailable_count: "{{ expand('group.all_running_class_binary_sensors')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          safety_sensors_triggered_count: "{{ expand('group.all_safety_class_binary_sensors')|selectattr('state','eq', 'on')|list|count }}"
          safety_sensors_unavailable_count: "{{ expand('group.all_safety_class_binary_sensors')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          signal_sensors_low_count: >
            {% set ns = namespace(c = 0) %}
            {% for battery in expand('group.all_signal_strength_class_sensors')-%}
              {%-if is_number(battery.state)-%}
                {%-if battery.state|int < -80%}
                  {% set ns.c = ns.c + 1 %}
                {%-endif-%}
              {%-endif-%}
            {%endfor%}
            {{ ns.c }}
          signal_sensors_unavailable_count: "{{ expand('group.all_signal_strength_class_sensors')|selectattr('state','in', ['unavailable','unknown'])|list|count }}"
          signal_sensors_average_value: >
            {% set ns = namespace(s = 0,c = 0) %}
            {% for signal in expand('group.all_signal_strength_class_sensors')-%}
              {%-if is_number(signal.state)-%}
                {%- set ns.s = ns.s + signal.state|int -%}
                {%- set ns.c = loop.length -%}
              {%-endif-%}
            {%endfor%}
            {%-if ns.c == 0-%}
              {%-set ns.c = 1-%}
            {%-endif-%}
            {{ (ns.s / ns.c)|round(0)|int }}
          tab_action_sensors_triggered_count: >
            {{
              [states('sensor.binary_sensor_state_counts')|int,
              state_attr('sensor.binary_sensor_state_counts', 'lights_on_count'),
              state_attr('sensor.binary_sensor_state_counts', 'fans_on_count'),
              state_attr('sensor.binary_sensor_state_counts', 'locks_unlocked_count'),
              state_attr('sensor.binary_sensor_state_counts', 'climate_devices_on_count'),
              state_attr('sensor.binary_sensor_state_counts', 'lawn_mower_busy_count')]
              |sum
            }}
          tab_information_sensors_triggered_count: >
            {{
              [state_attr('sensor.binary_sensor_state_counts', 'safety_sensors_triggered_count'),
              state_attr('sensor.binary_sensor_state_counts', 'door_sensors_triggered_count'),
              state_attr('sensor.binary_sensor_state_counts', 'occupancy_sensors_triggered_count'),
              state_attr('sensor.binary_sensor_state_counts', 'cameras_off_count'),
              state_attr('sensor.binary_sensor_state_counts', 'media_player_audio_on_count'),
              state_attr('sensor.binary_sensor_state_counts', 'media_player_tv_and_remote_on_count')]
              |sum
            }}
          tab_diagnostic_sensors_triggered_count: >
            {{
              [state_attr('sensor.binary_sensor_state_counts', 'device_trackers_away_count'),
              state_attr('sensor.binary_sensor_state_counts', 'connectivity_disconnected_count'),
              state_attr('sensor.binary_sensor_state_counts', 'running_stopped_count'),
              state_attr('sensor.binary_sensor_state_counts', 'batteries_below20_count'),
              state_attr('sensor.binary_sensor_state_counts', 'signal_sensors_low_count')]
              |sum
            }}
          tab_action_sensors_unavailable_count: >
            {{
              [state_attr('sensor.binary_sensor_state_counts', 'fans_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'locks_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'lawn_mower_error_count')]
              |sum
            }}
          tab_information_sensors_unavailable_count: >
            {{
              [state_attr('sensor.binary_sensor_state_counts', 'safety_sensors_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'door_sensors_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'occupancy_sensors_unavailable_count')]
              |sum
            }}
          tab_diagnostic_sensors_unavailable_count: >
            {{
              [state_attr('sensor.binary_sensor_state_counts', 'data_rate_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'device_trackers_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'connectivity_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'running_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'batteries_unavailable_count'),
              state_attr('sensor.binary_sensor_state_counts', 'signal_sensors_unavailable_count')]
              |sum
            }}
          unknown_value: "unknown"
          zero_value: "{{ 0|int }}"

      - unique_id: "integration_entity_attributes_template_generated"
        name: "Integration Entity Attributes"
        state: "0"
        attributes:
          domain_list: "{{ states|map(attribute='domain')|unique|list|sort}}"
          device_class_list: "{{ states|rejectattr('attributes.device_class', 'undefined')|map(attribute='attributes.device_class')|unique|list|sort }}"
          unit_of_measurement_list: "{{ states|rejectattr('attributes.unit_of_measurement', 'undefined')|map(attribute='attributes.unit_of_measurement')|unique|list|sort }}"
          integrations_installed_list: "{{ states|map(attribute='entity_id')|map('device_attr', 'identifiers')|reject('none')|map('first')|select('defined')|map(attribute='0')|unique|list|sort }}"
          area_id_list: >
            {%- for area in areas()|sort %}
              {{[
                area,
                area_name(area),
                area_name(area)|map('lower')|map('replace', ':', '')|map('replace', ',', '')|map('replace', ' ', '_')|join
              ]}}
            {%- endfor %}

      # Shelly Light Diagnotics
      - unique_id: "light_bathroom_shelly_diagnostics"
        name: "Bathroom Light Diagnostics"
        state: "{{ states('light.shelly_1l_bathroom_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_bathroom_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.bathroom_light_status') }}"
          switch_1: "{{ states('binary_sensor.bathroom_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.bathroom_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_bathroom_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.bathroom_light_esphome_version') }}"
          ip: "{{ states('sensor.bathroom_light_ip') }}"
          mac: "{{ states('sensor.bathroom_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_bathroom_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.bathroom_light_rssi') }}"
          ssid: "{{ states('sensor.bathroom_light_ssid') }}"
          temperature: "{{ states('sensor.bathroom_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.bathroom_light_firmware', 'installed_version') }}"

      - unique_id: "light_bed-a_shelly_diagnostics"
        name: "Bed A Light Diagnostics"
        state: "{{ states('light.shelly_1l_bed_a_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_bed_a_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.bed_a_light_status') }}"
          switch_1: "{{ states('binary_sensor.bed_a_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.bed_a_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_bed_a_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.bed_a_light_esphome_version') }}"
          ip: "{{ states('sensor.bed_a_light_ip') }}"
          mac: "{{ states('sensor.bed_a_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_bed_a_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.bed_a_light_rssi') }}"
          ssid: "{{ states('sensor.bed_a_light_ssid') }}"
          temperature: "{{ states('sensor.bed_a_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.bed_a_light_firmware', 'installed_version') }}"

      - unique_id: "light_bed-b_shelly_diagnostics"
        name: "Bed B Light Diagnostics"
        state: "{{ states('light.shelly_1l_bed_b_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_bed_b_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.bed_b_light_status') }}"
          switch_1: "{{ states('binary_sensor.bed_b_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.bed_b_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_bed_b_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.bed_b_light_esphome_version') }}"
          ip: "{{ states('sensor.bed_b_light_ip') }}"
          mac: "{{ states('sensor.bed_b_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_bed_b_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.bed_b_light_rssi') }}"
          ssid: "{{ states('sensor.bed_b_light_ssid') }}"
          temperature: "{{ states('sensor.bed_b_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.bed_b_light_firmware', 'installed_version') }}"

      - unique_id: "light_bed-c_shelly_diagnostics"
        name: "Bed C Light Diagnostics"
        state: "{{ states('light.shelly_1l_bed_c_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_bed_c_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.bed_c_light_status') }}"
          switch_1: "{{ states('binary_sensor.bed_c_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.bed_c_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_bed_c_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.bed_c_light_esphome_version') }}"
          ip: "{{ states('sensor.bed_c_light_ip') }}"
          mac: "{{ states('sensor.bed_c_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_bed_c_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.bed_c_light_rssi') }}"
          ssid: "{{ states('sensor.bed_c_light_ssid') }}"
          temperature: "{{ states('sensor.bed_c_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.bed_c_light_firmware', 'installed_version') }}"

      - unique_id: "light_bed-e_shelly_diagnostics"
        name: "Bed E Light Diagnostics"
        state: "{{ states('light.shelly_1l_bed_e_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_bed_e_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.bed_e_light_status') }}"
          switch_1: "{{ states('binary_sensor.bed_e_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.bed_e_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_bed_e_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.bed_e_light_esphome_version') }}"
          ip: "{{ states('sensor.bed_e_light_ip') }}"
          mac: "{{ states('sensor.bed_e_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_bed_e_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.bed_e_light_rssi') }}"
          ssid: "{{ states('sensor.bed_e_light_ssid') }}"
          temperature: "{{ states('sensor.bed_e_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.bed_e_light_firmware', 'installed_version') }}"

      - unique_id: "light_ensuite_shelly_diagnostics"
        name: "En-suite Light Diagnostics"
        state: "{{ states('light.shelly_1l_ensuite_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_ensuite_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.ensuite_light_status') }}"
          switch_1: "{{ states('binary_sensor.ensuite_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.ensuite_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_ensuite_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.ensuite_light_esphome_version') }}"
          ip: "{{ states('sensor.ensuite_light_ip') }}"
          mac: "{{ states('sensor.ensuite_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_ensuite_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.ensuite_light_rssi') }}"
          ssid: "{{ states('sensor.ensuite_light_ssid') }}"
          temperature: "{{ states('sensor.ensuite_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.ensuite_light_firmware', 'installed_version') }}"

      - unique_id: "light_hallway-bottom_shelly_diagnostics"
        name: "Bottom Hallway Light Diagnostics"
        state: "{{ states('light.shelly_1l_hallway_bottom_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_hallway_bottom_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.hallway_bottom_light_status') }}"
          switch_1: "{{ states('binary_sensor.hallway_bottom_light_switch_1') }}"
          switch_2: "{{ states('binary_sensor.hallway_bottom_light_switch_2') }}"
          bssid: "{{ states('sensor.hallway_bottom_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_hallway_bottom_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.hallway_bottom_light_esphome_version') }}"
          ip: "{{ states('sensor.hallway_bottom_light_ip') }}"
          mac: "{{ states('sensor.hallway_bottom_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_hallway_bottom_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.hallway_bottom_light_rssi') }}"
          ssid: "{{ states('sensor.hallway_bottom_light_ssid') }}"
          temperature: "{{ states('sensor.hallway_bottom_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.hallway_bottom_light_firmware', 'installed_version') }}"

      - unique_id: "light_kitchen-main_shelly_diagnostics"
        name: "Kitchen Main Light Diagnostics"
        state: "{{ states('light.shelly_1l_kitchen_main_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_kitchen_main_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.kitchen_main_light_status') }}"
          switch_1: "{{ states('binary_sensor.kitchen_main_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.kitchen_main_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_esphome_kitchen_main_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.kitchen_main_light_esphome_version') }}"
          ip: "{{ states('sensor.kitchen_main_light_ip') }}"
          mac: "{{ states('sensor.kitchen_main_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_kitchen_main_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.kitchen_main_light_rssi') }}"
          ssid: "{{ states('sensor.kitchen_main_light_ssid') }}"
          temperature: "{{ states('sensor.kitchen_main_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.kitchen_main_light_firmware', 'installed_version') }}"

      - unique_id: "light_kitchen-utility_shelly_diagnostics"
        name: "Kitchen Utility Light Diagnostics"
        state: "{{ states('light.shelly_1l_kitchen_utility_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_kitchen_utility_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.kitchen_utility_light_status') }}"
          switch_1: "{{ states('binary_sensor.kitchen_utility_light_switch_1') }}"
          switch_2: "{{ states('binary_sensor.kitchen_utility_light_switch_2') }}"
          bssid: "{{ states('sensor.kitchen_utility_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.kitchen_utility_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.esphome_kitchen_utility_light_esphome_version') }}"
          ip: "{{ states('sensor.kitchen_utility_light_ip') }}"
          mac: "{{ states('sensor.kitchen_utility_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_kitchen_utility_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.kitchen_utility_light_rssi') }}"
          ssid: "{{ states('sensor.kitchen_utility_light_ssid') }}"
          temperature: "{{ states('sensor.kitchen_utility_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.kitchen_utility_light_firmware', 'installed_version') }}"

      - unique_id: "light_lounge_shelly_diagnostics"
        name: "Lounge Light Diagnostics"
        state: "{{ states('light.shelly_1l_lounge_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_lounge_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.lounge_light_status') }}"
          switch_1: "{{ states('binary_sensor.lounge_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.lounge_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_lounge_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.lounge_light_esphome_version') }}"
          ip: "{{ states('sensor.lounge_light_ip') }}"
          mac: "{{ states('sensor.lounge_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_lounge_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.lounge_light_rssi') }}"
          ssid: "{{ states('sensor.lounge_light_ssid') }}"
          temperature: "{{ states('sensor.lounge_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.lounge_light_firmware', 'installed_version') }}"

      - unique_id: "light_study_shelly_diagnostics"
        name: "Study Light Diagnostics"
        state: "{{ states('light.shelly_1l_study_light_1') }}"
        attributes:
          icon: "{{ state_attr('light.shelly_1l_study_light_1', 'icon') }}"
          connected: "{{ states('binary_sensor.study_light_status') }}"
          switch_1: "{{ states('binary_sensor.study_light_switch_1') }}"
          switch_2: "off"
          bssid: "{{ states('sensor.study_light_bssid') }}"
          essid: "{{ state_attr('device_tracker.esphome_study_light_unifi', 'essid') }}"
          esphome_version: "{{ states('sensor.study_light_esphome_version') }}"
          ip: "{{ states('sensor.study_light_ip') }}"
          mac: "{{ states('sensor.study_light_mac') }}"
          ap_mac: "{{ state_attr('device_tracker.esphome_study_light_unifi', 'ap_mac') }}"
          rssi: "{{ states('sensor.study_light_rssi') }}"
          ssid: "{{ states('sensor.study_light_ssid') }}"
          temperature: "{{ states('sensor.study_light_temperature') }}"
          firmware_installed: "{{ state_attr('update.study_light_firmware', 'installed_version') }}"

      - unique_id: "floorplan_dates_template_generated"
        name: "Floorplan dates template generated"
        icon: >
          {% from 'easy_time.jinja' import clock_icon %}
          {{ clock_icon() }}
        state: >
          {% from 'easy_time.jinja' import clock %}
          {{ clock() }}
        attributes:
          front_door_last_opened: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.front_door_last_opened')) else easy_relative_time('input_datetime.front_door_last_opened') }}
          front_door_last_locked: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.front_door_last_locked')) else easy_relative_time('input_datetime.front_door_last_locked') }}
          back_door_last_opened: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.back_door_last_opened')) else easy_relative_time('input_datetime.back_door_last_opened') }}
          patio_door1_last_opened: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.patio_door1_last_opened')) else easy_relative_time('input_datetime.patio_door1_last_opened') }}
          patio_door2_last_opened: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.patio_door2_last_opened')) else easy_relative_time('input_datetime.patio_door2_last_opened') }}
          garage_door_last_opened: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.garage_door_last_opened')) else easy_relative_time('input_datetime.garage_door_last_opened') }}
          loft_ladder_last_opened: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.loft_ladder_last_opened')) else easy_relative_time('input_datetime.loft_ladder_last_opened') }}
          nest_protect_bottom_floor_last_activity: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.nest_protect_bottom_floor_last_activity')) else easy_relative_time('input_datetime.nest_protect_bottom_floor_last_activity') }}
          nest_protect_middle_floor_last_activity: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.nest_protect_middle_floor_last_activity')) else easy_relative_time('input_datetime.nest_protect_middle_floor_last_activity') }}
          nest_protect_top_floor_last_activity: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.nest_protect_top_floor_last_activity')) else easy_relative_time('input_datetime.nest_protect_top_floor_last_activity') }}
          motion_sensor_front_door_stairs_last_activity: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.motion_sensor_front_door_stairs_last_activity')) else easy_relative_time('input_datetime.motion_sensor_front_door_stairs_last_activity') }}
          motion_sensor_bed_e_last_activity: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('input_datetime.motion_sensor_bed_e_last_activity')) else easy_relative_time('input_datetime.motion_sensor_bed_e_last_activity') }}
          back_g3_flex_last_motion_detected: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('sensor.back_g3_flex_last_motion_detected')) else easy_relative_time('sensor.back_g3_flex_last_motion_detected') }}
          bed_c_g3_instant_last_motion_detected: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('sensor.bed_c_g3_instant_last_motion_detected')) else easy_relative_time('sensor.bed_c_g3_instant_last_motion_detected') }}
          bottom_hallway_g3_instant_last_motion_detected: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('sensor.bottom_hallway_g3_instant_last_motion_detected')) else easy_relative_time('sensor.bottom_hallway_g3_instant_last_motion_detected') }}
          doorbell_g4_last_doorbell_ring: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('sensor.doorbell_g4_last_doorbell_ring')) else easy_relative_time('sensor.doorbell_g4_last_doorbell_ring') }}
          front_g3_flex_last_motion_detected: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('sensor.front_g3_flex_last_motion_detected')) else easy_relative_time('sensor.front_g3_flex_last_motion_detected') }}
          kitchen_g3_instant_last_motion_detected: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('sensor.kitchen_g3_instant_last_motion_detected')) else easy_relative_time('sensor.kitchen_g3_instant_last_motion_detected') }}
          middle_hallway_g3_flex_last_motion_detected: >
            {% from 'easy_time.jinja' import easy_relative_time %}
            {{ 'Unknown' if has_value(easy_relative_time('sensor.middle_hallway_g3_flex_last_motion_detected')) else easy_relative_time('sensor.middle_hallway_g3_flex_last_motion_detected') }}
