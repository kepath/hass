---
sun:
  latitude: "52.0786°"
  longitude: "-1.3418°"

esphome:
  name: "${device_name}"
  comment: "${friendly_name}"
  platform: "ESP8266"
  board: "esp01_1m"
  on_boot:
    - priority: 300
      then:
        - light.turn_off: "lightid1"
        - logger.log: "startup - light should be off"

wifi:
  ssid: "${ssid}"
  password: !secret "not_wifi_password"
  domain: ".lan"
  on_connect:
    - light.turn_off: "${device_name}-light-1"
  on_disconnect:
    - light.turn_off: "${device_name}-light-1"
  manual_ip:
    static_ip: "192.168.30.${device_ip}"
    gateway: "192.168.30.1"
    subnet: "255.255.255.0"
    dns1: "192.168.30.1"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name}"
    manual_ip:
      static_ip: "192.168.100.${device_ip}"
      gateway: "192.168.100.1"
      subnet: "255.255.255.0"
      dns1: "8.8.8.8"
      dns2: "8.8.4.4"
    ap_timeout: "10min"

captive_portal:

logger:
  level: "${log_level}"
api:
ota:
web_server:
  port: 80
  version: 2

# time:
#   - platform: "homeassistant"
#     id: "homeassistant_time"

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: "version"
    name: "${device_name} ESPHome Version"
  - platform: "template"
    name: "${device_name}-uptime"
    id: "uptime_human"
    icon: "mdi:clock-start"
  # Expose WiFi information as sensors.
  - platform: "wifi_info"
    ip_address:
      name: "${device_name}-IP"
    ssid:
      name: "${device_name}-SSID"
    bssid:
      name: "${device_name}-BSSID"
    mac_address:
      name: "${device_name}-MAC"

sensor:
  - platform: "ntc"
    sensor: "temp_resistance_reading"
    name: "${device_name}-temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: "10kOhm"
      reference_temperature: "298.15K"
    on_value_range:
      - above: "${max_temp}"
        then:
          - light.turn_off: "lightid1"
          - homeassistant.service:
              service: "persistent_notification.create"
              data:
                title: "Message from ${device_name}"
              data_template:
                message: "Switch turned off because temperature exceeded ${max_temp}C"
  - platform: "resistance"
    id: "temp_resistance_reading"
    sensor: "temp_analog_reading"
    configuration: "DOWNSTREAM"
    resistor: "32kOhm"
  - platform: "adc"
    id: "temp_analog_reading"
    pin: "A0"
  - platform: "wifi_signal"
    name: "${device_name}-RSSI"
    update_interval: "60s"
    icon: "mdi:wifi"
  - platform: "uptime"
    name: "Uptime Sensor"
    id: "uptime_sensor"
    internal: true
    update_interval: "60s"
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: "uptime_human"
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "")
              ).c_str();

status_led:
  pin: "GPIO0"
